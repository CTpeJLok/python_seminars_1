import random, os  # Подключаем необходимые библиотеки

Letters = 'abcdefghij'  # Возможные ходы по горизонтали
Numbers = '0123456789'  # Возможные ходы по вертикали

Board = ['-'] * 100  # Игровое поле
Exists = 0  # Кол-во кораблей на поле
CountMiss = 0  # Кол-во промахов
CountShoot = 0  # Кол-во выстрелов
IsWin = False  # Победил ли игрок


def GenerateBoard():  # Создание игрового поля
    GenerateShips(1, 4)  # Запускаем методы создания кораблей (один четырехпалубный)
    GenerateShips(2, 3)  # два трехпалубных
    GenerateShips(3, 2)  # три двухпалубных
    GenerateShips(4, 1)  # четыре однопалубных


def GenerateShips(count: int, l: int):  # Метод создания кораблей (кол-во кораблей, кол-во палуб)
    global Exists  # Задаем глобальную переменную

    for i in range(count):  # Цикл по кол-ву кораблей
        x = random.randint(0, 99)  # Выбираем случайную позицию
        rotate = random.randint(0, 1)  # Выбираем направление размещения (0 - горизонтально, 1 - вертикально)

        while not SetShip(l, x, rotate):  # Пока не получается разместить такой корабль
            x = random.randint(0, 99)  # Выбираем новую случайную позицию
            rotate = random.randint(0, 1)  # Выбираем новое направление размещения

    Exists += count  # Записываем кол-во созданных кораблей


def SetShip(len: int, x: int, r: int):  # Функция размещения корабля на поле (кол-во палуб, позиция, направление размещения)
    ok = True  # Получилось ли разместить такой корабль

    if Board[x] != '-':  # Если начало корабля занято
        ok = False  # То такой корабль нельзя разместить

    if ok:  # Если корабль все еще можно разместить
        chk = True  # Есть ли место для размещения корабля
        for i in range(len):  # Цикл по кол-ву палуб
            a = 0  # Позиция палубы
            if r == 0:  # Если корабль должен стоять горизонтально
                a = x + i  # Прибавить к начальной позиции текущее кол-во палуб
            else:  # Если корабль должен стоять вертикально
                a = x + 10 * i  # Прибавить к начальной позиции текущее кол-во палуб (вниз - это + 10 к позиции)

            if not CheckPoint(a):  # Если есть место для текущей палубы
                chk = False  # То нет места для размещения корабля
                break  # Перестать проверять следующие палубы, это не имеет смысла

        if chk:  # Если есть место для размещения корабля
            for i in range(len):  # Цикл по кол-ву палуб
                if r == 0:  # Если корабль стоит горизонтально
                    Board[x + i] = '□'  # То разместить текущую палубу
                elif r == 1:  # Если корабль стоит вертикально
                    Board[x + 10 * i] = '□'  # То разместить текущую палубу
        else:  # Если нет маста для размещения корабля
            ok = False  # То не получилось разместить такой корабль

    return ok  # Возвращаем получилось ли разместить такой корабль


def CheckPoint(x: int):  # Проверка свободности точки для палубы
    ok = True  # Свободна ли точка

    if x < 0 or x > 99:  # Если точка лежит за пределами поля
        ok = False  # То точка недоступна

    # Проверка точек
    if x > 0 and x < 100:
        if Board[x - 1] != '-':
            ok = False
    if x < 99 and x > -1:
        if Board[x + 1] != '-':
            ok = False
    if x > 9 and x < 100:
        if Board[x - 10] != '-':
            ok = False
    if x < 90 and x > -1:
        if Board[x + 10] != '-':
            ok = False
    if x > 10 and x < 100:
        if Board[x - 1 - 10] != '-':
            ok = False
    if x < 91 and x > -1:
        if Board[x - 1 + 10] != '-':
            ok = False
    if x > 8 and x < 100:
        if Board[x + 1 - 10] != '-':
            ok = False
    if x < 89 and x > -1:
        if Board[x + 1 + 10] != '-':
            ok = False

    return ok  # Возвращаем свободность точки


def PrintBoard():  # Метод вывода игрового поля
    os.system('cls')  # Очищаем консоль
    print('Игра "Морской бой"')  # Выводим название игры
    print('   a b c d e f g h i j')  # Вывод навигационного текста
    for i in range(10):  # Цикл для вывода строк
        k = str(i)  # Переменная для навигационного текста
        print(k + ' ' * (2 - len(k)), end=' ')  # Вывод навигационного текста
        for j in range(10):  # Цикл для вывода столбцов
            print(Board[i * 10 + j].replace('□', '-'), end=' ')  # Вывод игрового поля
        print()  # Разделение строк


def PrintInfo():  # Метод вывода информации
    print('Выстрелы:', CountShoot)  # Вывод кол-ва выстрелов
    print('Промахи:', CountMiss)  # Вывод кол-ва промахов
    print('Осталось', Exists, 'кораблей')  # Вывод кол-ва оставшихся кораблей
    print('Куда стреляем? Пример: a1 (первый символ - буква, второй - цифра)')  # Спрашиваем ввод и выводим пример хода


def CheckShoot(x: int):  # Функция проверки выстрела
    if Board[x] in '*x':  # Если в эту точку уже стреляли или уже попали в палубу или корабль
        return 'В эту точку Вы уже стреляли. Выберите другую'  # То возвращаем соотв. сообщение
    else:  # Если точка пустая или стоит корабль
        return ''  # Возвращаем пустую строку


def Shoot(x: int):  # Метод выстрела
    global CountShoot, CountMiss  # Задаем глобальные переменные

    CountShoot += 1  # Прибавляем кол-во выстрелов
    if Board[x] == '-':  # Если выстрелили в пустую клетку
        Board[x] = '*'  # Ставим на ней промах
        CountMiss += 1  # Прибавляем кол-во промахов
    else:  # Если выстрелили в корабль
        Board[x] = 'x'  # То убираем палубу корабля
        CheckDead(x)  # Проверяем этот корабль на полное уничтожение


def CheckDead(x: int):  # Метод проверки корабля на полное уничтожение
    global Exists  # Задаем глобальную переменную

    Dead = True  # Уничтожен ли корабль

    # Проверяем соседние точки на наличие палуб
    # Если найдены палубы, то корабль еще жив
    if x < 99:
        if Board[x + 1] == '□':
            Dead = False
    if x > 0:
        if Board[x - 1] == '□':
            Dead = False
    if x < 90:
        if Board[x + 10] == '□':
            Dead = False
    if x > 9:
        if Board[x - 10] == '□':
            Dead = False

    if Dead:  # Если корабль уничтожен полностью
        Exists -= 1  # Убираем один живой корабль
        a = [x]  # Точки, вокруг которых надо поставить промахи
        for i in range(1, 4):  # Проверка палуб справа
            if x + i < 10 * (x // 10 + 1) and Board[x + i] == 'x':
                a.append(x + 1)
            else:
                break
        for i in range(1, 4):  # Проверка палуб слева
            if x - i >= 10 * (x // 10) and Board[x - i] == 'x':
                a.append(x - i)
            else:
                break
        for i in range(1, 4):  # Проверка палуб снизу
            if x + 10 * i < 100 and Board[x + 10 * i] == 'x':
                a.append(x + 10 * i)
            else:
                break
        for i in range(1, 4):  # Проверка палуб сверху
            if x - 10 * i >= 0 and Board[x - 10 * i] == 'x':
                a.append(x - 10 * i)
            else:
                break
        for i in a:  # Проход по найденным палубам
            SetMisses(i)  # Вызываем метод размещения промахов вокруг найденных точек


def SetMisses(x: int):  # Метод размещения промахов вокруг палуб
    # Замена пустых точек вокруг палубы на промахи
    if x > 0 and x - 1 >= 10 * (x // 10):
        Board[x - 1] = Board[x - 1].replace('-', '*')
    if x < 99 and x + 1 < 10 * (x // 10 + 1):
        Board[x + 1] = Board[x + 1].replace('-', '*')
    if x > 10 and x - 1 - 10 >= 10 * (x // 10 - 1):
        Board[x - 1 - 10] = Board[x - 1 - 10].replace('-', '*')
    if x <= 90 and x - 1 + 10 >= 10 * (x // 10 + 1):
        Board[x - 1 + 10] = Board[x - 1 + 10].replace('-', '*')
    if x <= 88 and x + 1 + 10 < 10 * (x // 10 + 2):
        Board[x + 1 + 10] = Board[x + 1 + 10].replace('-', '*')
    if x > 9 and x + 1 - 10 > 10 * (x // 10 - 1):
        Board[x + 1 - 10] = Board[x + 1 - 10].replace('-', '*')
    if x <= 89:
        Board[x + 10] = Board[x + 10].replace('-', '*')
    if x >= 10:
        Board[x - 10] = Board[x - 10].replace('-', '*')


def CheckWin():  # Функция проверки победы
    global Exists  # Задаем глобальную переменную

    if Exists > 0:  # Если остались живые корабли
        return False  # То игрок еще не победил
    else:  # Если все корабли уничтожены
        return True  # Игрок победил


def Game():  # Основной метод игры
    global IsWin  # Задаем глобальную переменную

    GenerateBoard()  # Создаем новое игровоеполе
    PrintBoard()  # Выводим поле
    PrintInfo()  # Выводим информацию

    while not IsWin:  # Пока игрок не победил
        x = input()  # Получаем от игрока ход
        IsCorrectShoot = True  # Корректность введенного хода
        if len(x) == 2:  # Если ход состоит из двух символов
            if x[0] not in Letters or x[1] not in Numbers:  # Если первый символ не буква, второй не цифра
                IsCorrectShoot = False  # То ход неправильный
        else:  # Если длина хода не равна двум
            IsCorrectShoot = False  # То ход неправильный

        if IsCorrectShoot:  # Если получен корректный ход
            x = 10 * int(x[1]) + Letters.index(x[0])  # Переводим ход в координату
            IsShootCorrect = CheckShoot(x)  # Проверяем корректность выстрела
            if IsShootCorrect == '':  # Если игрок выстрелил в корабль или в пустую клетку
                Shoot(x)  # Производим выстрел
                PrintBoard()  # Выводим доску
                PrintInfo()  # Выводим информацию
                IsWin = CheckWin()  # Проверяем победу игрока
            else:  # Если игрок выстрелил в уже стрелянную клетку
                print(IsShootCorrect)  # Выводим соотв. сообщение
        else:  # Если получен некорректный ход
            print('Неправильный ввод')  # Выводим сообщение об ошибке

        if IsWin:  # Если игрок победил
            print('Вы победили')  # Выводим соотв. сообщение
            print('Для выхода из игры нажмини Enter')  # Выводим инструкцию для выхода их игры
            input()  # Ждем вывод, чтобы консоль сразу не закрывалась


Game()  # Запускаем игру
