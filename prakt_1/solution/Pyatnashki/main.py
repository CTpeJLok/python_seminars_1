import random, os, keyboard  # Подключаем необходимые библиотеки

CurrentWays = []  # Возможные ходы
IsWin = False  # Выиграл ли пользователь
WinBoard = [  # Выигрышная доска
    '1', '2', '3', '4',
    '5', '6', '7', '8',
    '9', '10', '11', '12',
    '13', '14', '15', '□'
]
Board = [  # Текущая доска
    '1', '2', '3', '4',
    '5', '6', '7', '8',
    '9', '10', '11', '12',
    '13', '14', '15', '□'
]


def GenerateBoard():  # Метод генерации доски
    global Board  # Задаем глобальную переменную

    steps = []  # Возможные ходы для квадрата
    b = Board.index('□')  # Получает индекс квадрата
    c = b // 4  # Получаем номер строки, на которой находится квадрат

    if b + 1 < (c + 1) * 4:  # Проверяем возможные ходы
        steps.append('r')  # Если ход возможен, то записываем его
    if b - 1 >= c * 4:
        steps.append('l')
    if b + 4 < 16:
        steps.append('d')
    if b - 4 > -1:
        steps.append('u')

    d = random.randint(0, len(steps) - 1)  # Выбираем случайный из найденных ход
    if steps[d] == 'r':  # Ищем выбранный ход
        Board[b] = Board[b + 1]  # Меняем символы местами
        Board[b + 1] = '□'
    elif steps[d] == 'l':
        Board[b] = Board[b - 1]
        Board[b - 1] = '□'
    elif steps[d] == 'u':
        Board[b] = Board[b - 4]
        Board[b - 4] = '□'
    else:
        Board[b] = Board[b + 4]
        Board[b + 4] = '□'


def MoveToStart():  # Метод перемещения квадрата в начальную позицию (справа снизу)
    global Board  # Задаем глобальную переменную

    b = Board.index('□')  # Находим индекс квадрата
    while b + 4 < 16:  # Пока возможно двигаться вниз
        Board[b] = Board[b + 4]  # Меняем символы местами
        Board[b + 4] = '□'
        b += 4  # Задаем новый индекс квадрата
    while b + 1 < 16:  # Пока возможно двигаться вправо
        Board[b] = Board[b + 1]  # Меняем символы местами
        Board[b + 1] = '□'
        b += 1  # Задаем новый индекс квадрата


def CheckWays():  # Метод проверки возможных ходов
    global Board, CurrentWays  # Задаем глобальные переменные

    CurrentWays = []  # Очищаем текущие ходы
    a = Board.index('□')  # Находим индекс квадрата

    if a + 1 <= (a // 4) * 4 + 3:  # Проверяем возможные ходы
        CurrentWays.append('→')  # Если ход возможен, то записываем его
    if a - 1 >= (a // 4) * 4:
        CurrentWays.append('←')
    if 0 <= a - 4 <= 15:
        CurrentWays.append('↑')
    if 0 <= a + 4 <= 15:
        CurrentWays.append('↓')


def CheckWin():  # Функция проверки победы пользователя
    global Board, WinBoard  # Задаем глобальные переменные

    if Board == WinBoard:  # Если текущая доска равна выигрышной
        return True  # То пользователь победил
    else:
        return False  # Иначе нет


def PrintBoard():  # Метод вывода доски
    os.system('cls')  # Очищаем консоль
    print('Игра "Пятнашки"')  # Выводим название игры
    for i in range(4):  # Цикл по строкам
        for j in range(4):  # Цикл по столбцам
            a = Board[i * 4 + j]  # Получаем символ на текущей позиции
            print(a + ' ' * (2 - len(a)), end=' ')  # Выводим текущий символ. Если символ один, то к нему добавляется пробел
        print()  # Разделяем строки


def PrintWays():  # Метод вывода возможных ходов
    a = str(CurrentWays).replace('[', '').replace(']', '').replace("'", '')  # Записываем возможные ходы в строку
    print('Вы можете передвинуть квадрат по следующим направлениям:', a)  # Выводим их
    print('Нажмите на одну из этих стрелок на вашей клавиатуре')  # Выводим инструкцию


def MoveLeft():  # Метод движения квадрата влево
    global IsWin, CurrentWays  # Задаем глобальные переменные

    if not IsWin:  # Если игрок еще не победил
        if '←' in CurrentWays:  # И такой ход возможен
            a = Board.index('□')  # Получаем индекс квадрата
            Board[a] = Board[a - 1]  # Меняем символы местами
            Board[a - 1] = '□'
            PastMove()  # Вызываем метод для операций после хода
        else:  # Если такого хода нет в возможных
            print('Такой ход невозможен')  # Выводим сообщение
    else:  # Если игрок уже выиграл
        PastMoveIfWin()  # Вызываем метод для операций после выигрыша


def MoveRight():  # Метод движения квадрата вправо
    global IsWin, CurrentWays  # Задаем глобальные переменные

    if not IsWin:  # Если игрок еще не победил
        if '→' in CurrentWays:  # И такой ход возможен
            a = Board.index('□')  # Получаем индекс квадрата
            Board[a] = Board[a + 1]  # Меняем символы местами
            Board[a + 1] = '□'
            PastMove()  # Вызываем метод для операций после хода
        else:  # Если такого хода нет в возможных
            print('Такой ход невозможен')  # Выводим сообщение
    else:  # Если игрок уже выиграл
        PastMoveIfWin()  # Вызываем метод для операций после выигрыша


def MoveUp():
    global IsWin, CurrentWays  # Задаем глобальные переменные

    if not IsWin:  # Если игрок еще не победил
        if '↑' in CurrentWays:  # И такой ход возможен
            a = Board.index('□')  # Получаем индекс квадрата
            Board[a] = Board[a - 4]  # Меняем символы местами
            Board[a - 4] = '□'
            PastMove()  # Вызываем метод для операций после хода
        else:  # Если такого хода нет в возможных
            print('Такой ход невозможен')  # Выводим сообщение
    else:  # Если игрок уже выиграл
        PastMoveIfWin()  # Вызываем метод для операций после выигрыша


def MoveDown():
    global IsWin, CurrentWays  # Задаем глобальные переменные

    if not IsWin:  # Если игрок еще не победил
        if '↓' in CurrentWays:  # И такой ход возможен
            a = Board.index('□')  # Получаем индекс квадрата
            Board[a] = Board[a + 4]  # Меняем символы местами
            Board[a + 4] = '□'
            PastMove()  # Вызываем метод для операций после хода
        else:  # Если такого хода нет в возможных
            print('Такой ход невозможен')  # Выводим сообщение
    else:  # Если игрок уже выиграл
        PastMoveIfWin()  # Вызываем метод для операций после выигрыша


def PastMove():  # Метод для операций после хода
    global IsWin  # Задаем глобальную переменную

    PrintBoard()  # Выводим доску
    IsWin = CheckWin()  # Проверяем выиграл ли пользователь
    if IsWin:  # Если пользователь выиграл
        PastMoveIfWin()  # Вызываем метод для операций после выигрыша
    else:  # Если игра еще идет
        CheckWays()  # Проверяем возможные ходы
        PrintWays()  # Выводим возможные ходы


def PastMoveIfWin():  # Метод для операций после выигрыша
    CurrentWays = []  # Очищаем возможные ходы
    print('Вы выиграли')  # Выводим сообщение о победе
    print('Для выхода из игры нажмите пробел')  # Выводим инструкцию для выхода из игры


def Game():
    global IsWin, Board  # Задаем глобальную переменную

    keyboard.add_hotkey('left', MoveLeft)  # Создаем действия для стрелок на клавиатуре
    keyboard.add_hotkey('right', MoveRight)
    keyboard.add_hotkey('up', MoveUp)
    keyboard.add_hotkey('down', MoveDown)

    for i in range(1000):  # Делаем тысячу перестановок на доске
        GenerateBoard()  # Вызывая метод генерации доски
    MoveToStart()  # Запускаем метод перемещения квадрата в начальное положение
    Board = ['1', '2', '3', '4',
             '12', '9', '8', '5',
             '10', '14', '6', '7',
             '15', '11', '13', '□']

    PrintBoard()  # Выводим доску
    CheckWays()  # Находим возможные ходы
    PrintWays()  # Выводим возможные ходы

    keyboard.wait('space', suppress=True)  # Принимаем нажатие клавиш на клавиатуре пока не нажали пробел


Game()  # Запускаем игру
