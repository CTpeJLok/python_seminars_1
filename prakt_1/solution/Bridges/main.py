import os, keyboard  # Подключаем необходимые библиотеки

Board = [
    '□', 'o', ' ', 'o', ' ', 'o', ' ', 'o', ' ',
    'x', ' ', 'x', ' ', 'x', ' ', 'x', ' ', 'x',
    ' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o', ' ',
    'x', ' ', 'x', ' ', 'x', ' ', 'x', ' ', 'x',
    ' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o', ' ',
    'x', ' ', 'x', ' ', 'x', ' ', 'x', ' ', 'x',
    ' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o', ' ',
    'x', ' ', 'x', ' ', 'x', ' ', 'x', ' ', 'x',
    ' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o', ' '
]  # Игровое поле
CurrentSymbol = ' '  # Символ на месте квадрата
Player = False  # Ходящий игрок
IsWin = False  # Победил ли кто-то
PlayerTranslate = {
    False: 'крестик',
    True: 'нолик'
}  # Перевод ходящего игрока для вывода в консоль


def PrintBoard():  # Метод вывода игрового поля
    os.system('cls')  # Очищаем консоль
    print('                 -Игра "Мостики"\n')  # Выводим название игры
    print('                  Берег ноликов')  # Выводим название берега
    print('                    _________   ')  # Выводим берег
    for i in range(9):  # Цикл по строкам игрового поля
        if i != 4:  # На всех строках, кроме пятой, выводим игровое поле
            print('                   |', end='')  # Выводим берег
            for j in range(9):  # Цикл по столбцам
                print(Board[i * 9 + j], end='')  # Выводим элементы игрового поля
            print('|')  # Выводим берег
        else:  # На пятой строке выводим игровое поле и название берегов
            print('   Берег крестиков |', end='')  # Выводим название берега и берег
            for j in range(9):  # Цикл по столбцам
                print(Board[i * 9 + j], end='')  # Выводим элементы игрового поля
            print('| Берег крестиков')  # Выводим берег и название берега
    print('                    ¯¯¯¯¯¯¯¯¯')  # Выводим берег
    print('                  Берег ноликов\n')  # Выводим название берега

    PrintInfo()  # Выводим информацию о ходящем игроке и символе вместо квадрата или победы

def PrintInfo():  # Метод вывода информации о ходящем игроке и символе вместо квадрата или победы
    global IsWin, CurrentSymbol, Player  # Задаем глобальные переменные

    if not IsWin:  # Если никто не победил
        print('На месте квадрата стоит: "' + CurrentSymbol + '"')  # Выводим символ вместо квадрата
        print('Ходит', PlayerTranslate[Player])  # Выводим ходящего игрока
        print('Для передвижения квадрата используйте стрелки на клавиатуре')  # Выводим инструкцию по управлению
        print('Чтобы подтвердить ход нажмите Enter')  # Выводим инструкцию для размещения моста
    else:  # Если игрок победил
        print('Выиграл', PlayerTranslate[Player])  # Выводим победившего игрока
        print('Для выхода из программы нажмите пробел')  # Выводим инструкцию для выхода из программы


def MoveRight():  # Метод передвижения вправо
    global CurrentSymbol, IsWin  # Задаем глобальные переменные

    if not IsWin:  # Если никто не победил
        a = Board.index('□')  # Получаем индекс квадрата
        Board[a] = CurrentSymbol  # Ставим на место квадрата нужный символ
        a += 2  # Сдвигаем квадрат вправо на 2 (перепрыгиваем x и o)
        if a > 80:  # Если новая позиция квадрата вне поля
            a -= 82  # То сдвигаемся к началу поля
        CurrentSymbol = Board[a]  # Сохраняем новый символ
        Board[a] = '□'  # Ставим вместо этого символа квадрат

        PrintBoard()  # Выводим доску
    else:  # Если игрок победил
        print('Для выхода из программы нажмите пробел')  # Выводим инструкцию для выхода из программы


def MoveLeft():  # Метод передвижения вправо
    global CurrentSymbol, IsWin  # Задаем глобальные переменные

    if not IsWin:  # Если никто не победил
        a = Board.index('□')  # Получаем индекс квадрата
        Board[a] = CurrentSymbol  # Ставим на место квадрата нужный символ
        a -= 2  # Сдвигаем квадрат влево на 2 (перепрыгиваем x и o)
        if a < 0:  # Если новая позиция квадрата вне поля
            a += 82  # То сдвигаем к концу поля
        CurrentSymbol = Board[a]  # Сохраняем новый символ
        Board[a] = '□'  # Ставим вместо этого символа квадрат

        PrintBoard()  # Выводим доску
    else:  # Если игрок победил
        print('Для выхода из программы нажмите пробел')  # Выводим инструкцию для выхода из программы


def MoveUp():  # Метод передвижения вправо
    global CurrentSymbol, IsWin  # Задаем глобальные переменные

    if not IsWin:  # Если никто не победил
        a = Board.index('□')  # Получаем индекс квадрата
        Board[a] = CurrentSymbol  # Ставим на место квадрата нужный символ
        a -= 9  # Сдвигаем квадрат на одну клетку вверх
        if a < 0:  # Если новая позиция квадрата вне поля
            a += 81  # То сдвигаем к концу поля
        if Board[a] in 'xo':  # Если на новом месте стоит x или o
            if a == 9 * (a // 9):  # Если новую позицию нельзя сместить влево
                a += 1  # То смещаем вправо
            else:  # Если можно сместить влево
                a -= 1  # То смещаем влево
        CurrentSymbol = Board[a]  # Сохраняем новый символ
        Board[a] = '□'  # Ставим вместо этого символа квадрат

        PrintBoard()  # Выводим доску
    else:  # Если игрок победил
        print('Для выхода из программы нажмите пробел')  # Выводим инструкцию для выхода из программы


def MoveDown():  # Метод передвижения вправо
    global CurrentSymbol, IsWin  # Задаем глобальные переменные

    if not IsWin:  # Если никто не победил
        a = Board.index('□')  # Получаем индекс квадрата
        Board[a] = CurrentSymbol  # Ставим на место квадрата нужный символ
        a += 9  # Сдвигаем квадрат на одну клетку вниз
        if a > 80:  # Если новая позиция вне поля
            a -= 81  # То сдвигаем к началу полу
        if Board[a] in 'xo':  # Если на новом месте стоит x или o
            if a == 9 * (a // 9 + 1) - 1:  # Если новую позицию нельзя сместить вправо
                a -= 1  # То смещаем влево
            else:  # Если можно сместить вправо
                a += 1  # То смещаем вправо
        CurrentSymbol = Board[a]  # Сохраняем новый символ
        Board[a] = '□'  # Ставим вместо этого символа квадрат

        PrintBoard()  # Выводим доску
    else:  # Если игрок победил
        print('Для выхода из программы нажмите пробел')  # Выводим инструкцию для выхода из программы


def SetBridge():  # Метод размещения моста
    global Player, CurrentSymbol  # Задаем глобальные переменные

    IsBridgeSet = False  # Поставлен ли мост

    if CurrentSymbol not in '-|':  # Если на текущей позиции нет моста
        a = Board.index('□')  # Получаем индекс квадрата

        if a > 9 * (a // 9) and a < 9 * (a // 9 + 1) - 1:  # Если слева и справа от квадрата есть x или o
            if Board[a - 1] == 'o' and Board[a + 1] == 'o' and Player \
                    or Board[a - 1] == 'x' and Board[a + 1] == 'x' and (not Player):  # Проверка соседних точек
                Board[a] = '-'  # То ставим мост
                IsBridgeSet = True  # Мост поставлен
        if a - 9 > 0 and a + 9 < 81 and (not IsBridgeSet):  # Если сверху и снизу от квадрата есть x или o
            if Board[a - 9] == 'o' and Board[a + 9] == 'o' and Player \
                    or Board[a - 9] == 'x' and Board[a + 9] == 'x' and (not Player):  # Проверка соседних точек
                Board[a] = '|'  # То ставим мост
                IsBridgeSet = True  # Мост поставлен

    if IsBridgeSet:  # Если мост поставлен
        CurrentSymbol = Board[0]  # Сохраняем первый символ
        Board[0] = '□'  # Ставим на его место квадрат
        CheckWin()  # Проверяем победу
        PrintBoard()  # Выводим доску
    else:  # Если мост не поставлен
        print('Ошибка! Здесь нельзя поставить мост')  # Выводим сообщение об ошибке

def CheckWin():  # Метод проверки победы
    global IsWin, Player  # Задаем глобальные переменные

    IsHaveDots = False  # Если есть необходимые мосты

    if Player:  # Если ходил нолик
        if '|' in Board[9:18] and '|' in Board[27:36] and '|' in Board[45:54] and '|' in Board[63:72]:
            IsHaveDots = True  # Если есть необходимые моста, то записываем это
    else:  # Если ходил крестик
        a = Board[10] + Board[28] + Board[46] + Board[64]  # Сохраняем точки
        b = Board[12] + Board[30] + Board[48] + Board[66]
        c = Board[14] + Board[32] + Board[50] + Board[68]
        d = Board[16] + Board[34] + Board[52] + Board[70]
        if '-' in a and '-' in b and '-' in c and '-' in d:  # Если в этих точках есть необходимые
            IsHaveDots = True  # То записываем это

    if IsHaveDots:  # Если есть необходимые мосты
        Steps = []  # Непрерывные пути
        for i in range(len(Board)):  # Цилл по всему игровому полю
            ok = False  # Правильный ли мост
            if i > 9 and i < 72:  # Если для вертикального моста есть позиции сверху и снизу
                if Board[i] == '|':  # Если мост вертикальный
                    if Player and Board[i - 9] == 'o' or (not Player) and Board[i - 9] == 'x':  # Если мост для нужного игрока
                        ok = True  # То мост правильный
            if i > 1 and i < 79:  # Если для горизонтального моста есть позиции слева и сверху
                if Board[i] == '-':  # Если мост горизонтальный
                    if Player and Board[i - 1] == 'o' or (not Player) and Board[i - 1] == 'x':  # Если мост для нужного игрока
                        ok = True  # То мост правильный
            if ok:  # Если мост правильный
                a = FindNear(i)  # Находим соседние мосты
                Steps.append([i] + a)  # Добавляем в напрерывные пути найденные точки
                k = 1  # Индекс поиска следующих соседних точек (0 - начальная, 1 - найденная)
                while k < len(Steps[-1]):  # Пока есть еще непроверенные точки
                    a = FindNear((Steps[-1])[k])  # Находим соседние точки для найденной
                    for j in a:  # Цикл по найденным соседним точкам
                        if j not in Steps[-1]:  # Если такой точки нет в найденных
                            Steps[-1].append(j)  # То добавляем ее в текущий непрерывный путь
                    k += 1  # Переходим к следующей найденной точке
                    if k > 35:  # Если нашлось много точек
                        k = len(Steps[-1])  # То остановим цикл
        for i in Steps:  # Цикл по найденным непрерывным путям
            if Player:  # Если ходил нолик
                if 10 in i or 12 in i or 14 in i or 16 in i:  # Проверяем наличие необходимых мостов для одного берега
                    if 70 in i or 68 in i or 66 in i or 64 in i:  # Проверяем наличие необходимых мостов для другого берега
                        IsWin = True  # То игрок победил
                        break  # Останавливаем цикл
            else:  # Если ходил крестик
                if 10 in i or 28 in i or 46 in i or 64 in i:  # Проверяем наличие необходимых мостов для одного берега
                    if 16 in i or 34 in i or 52 in i or 70 in i:  # Проверяем наличие необходимых мостов для другого берега
                        IsWin = True  # То игрок победил
                        break  # Останавливаем цикл

    if not IsWin:  # Если игрок не победил
        Player = not Player  # Меняем ходящего игрока


def FindNear(x: int):  # функция проверки соседних мостов
    Result = []  # Найденные мосты

    # Проверка моста слева
    if x >= 9 * (x // 9) + 2:
        if Board[x] == '-':
            if Board[x - 2] == '-':
                Result.append(x - 2)
    # Проверка моста справа
    if x < 9 * (x // 9 + 1) - 2:
        if Board[x] == '-':
            if Board[x + 2] == '-':
                Result.append(x + 2)
    # Проверка моста сверху
    if x > 17:
        if Board[x] == '|':
            if Board[x - 18] == '|':
                Result.append(x - 18)
    # Проверка моста снизу
    if x < 63:
        if Board[x] == '|':
            if Board[x + 18] == '|':
                Result.append(x + 18)
    # Проверка моста снизу справа
    if x < 71:
        if Board[x] == '-':
            if Board[x + 9 + 1] == '|':
                Result.append(x + 9 + 1)
        else:
            if Board[x + 9 + 1] == '-':
                Result.append(x + 9 + 1)
    # Проверка моста снизу слева
    if x + 9 - 1 > 9 * (x // 9) and x < 71:
        if Board[x] == '-':
            if Board[x + 9 - 1] == '|':
                Result.append(x + 9 - 1)
        else:
            if Board[x + 9 - 1] == '-':
                Result.append(x + 9 - 1)
    # Проверка моста сверху справа
    if x > 9 and x < 9 * (x // 9 + 1) - 1:
        if Board[x] == '-':
            if Board[x - 9 + 1] == '|':
                Result.append(x - 9 + 1)
        else:
            if Board[x - 9 + 1] == '-':
                Result.append(x - 9 + 1)
    # Проверка моста сверху слева
    if x > 9 and x > 9 * (x // 9):
        if Board[x] == '-':
            if Board[x - 9 - 1] == '|':
                Result.append(x - 9 - 1)
        else:
            if Board[x - 9 - 1] == '-':
                Result.append(x - 9 - 1)

    return Result  # Возвращаем найденные мосты


def Game():  # Основной метод игры
    keyboard.add_hotkey('right', MoveRight)  # Создаем действия для стрелок на клвиатуре
    keyboard.add_hotkey('left', MoveLeft)
    keyboard.add_hotkey('up', MoveUp)
    keyboard.add_hotkey('down', MoveDown)
    keyboard.add_hotkey('enter', SetBridge)  # Создаем действие для размещения моста

    PrintBoard()  # Выводим доску

    keyboard.wait('space', suppress=True)  # Принимаем нажатие клавиш на клавиатуре пока не нажали пробел


Game()  # Запускаем игру
