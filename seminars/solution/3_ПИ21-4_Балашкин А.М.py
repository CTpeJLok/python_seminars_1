import random, string

# Семинар 14.09.21
# 0
def s1409z0():
    # Получить переменную, содержащую строку со значением равным двум в одиннадцатой степени и вывести ее на экран
    print('Семинар 14.09.21\nЗадание 0 - ', end='')
    print('Получить переменную, содержащую строку со значением равным двум в одиннадцатой степени и вывести ее на экран', end='\n\n\n')

    s = str(2**11)
    print(s, type(s), '- вывод')

    # Мое решение
    c = 1 # Начальное значение
    for i in range(11): # Цикл от 0 до 10
        c *= 2 # Умножение переменной на 2 (возведение в следующую степень)
    s = str(c) # Запись целочисленной переменной в строку
    print(s, type(s), '- вывод') # Вывод строки
# 1
def s1409z1():
    # Наибольшим количеством способов создать строковую переменную, содержащую текст: It's "quoted string"
    print('Семинар 14.09.21\nЗадание 1 - ', end='')
    print('''Наибольшим количеством способов создать строковую переменную, содержащую текст: It's "quoted string"''', end='\n\n\n')

    s1 = 'It\'s "quoted string"'
    s2 = "It\'s \"quoted string\""
    s3 = 'It' + "'" + 's "quoted string"'
    s4 = '''It's "quoted string"'''
    b = ' "quoted string"'
    s5 = "It's %s" %b
    print(s1, ' ', s2, ' ', s3, ' ', s4, ' ', s5, '- вывод')

    # Мое решение
    s = [] # Массив для вывода ответа
    a = "It's" # Первая часть текста
    b = ' "quoted string"' # Вторая часть текста

    s.append(a + b) # Сложение строковых переменных
    s.append(a + ' "quoted string"') # Сложение строковой переменной и строки
    s.append('%s "quoted string"' %a) # Форматирование строки с помощью знака "%"
    s.append(f'{a}{b}') # Форматирование с использованием f-строки (две строковые переменные)
    s.append(f"It's {b}") # Форматирование с использованием f-строки (первая часть текста плюс строковая переменная)
    s.append(f'{a} "quoted string"') # Форматирование с использованием f-строки (строковая переменная плюс вторая часть текста)

    res = '   '.join(s) # Преобразование массива строк в одну строку с пробелами
    print(res, '- вывод') # Вывод результата
# 2
def s1409z2():
    # Наибольшим количеством способов создать строковую переменную, содержащую текст:
    # line1
    # line2
    # line3
    print('Семинар 14.09.21\nЗадание 2 - ', end='')
    print('Наибольшим количеством способов создать строковую переменную, содержащую текст:\nline1\nline2\nline3', end='\n\n\n')

    z1 = '''line1
line2
line3'''
    print(z1, '- вывод', end='\n\n')
    z1 = 'line1 \nline2 \nline3'
    print(z1, '- вывод', end='\n\n')

    # Мое решение
    s = ['line1 ', 'line2 ', 'line3'] # Массив с заданными строками
    for i in range(len(s) - 1): # Цикл перебора чисел от 0 до 2
        print(s[i]) # Вывод строки из массива
    print(s[-1], '- вывод', end='\n\n') # Разделение ответов

    z1 = 'line1 ' + '\n' + 'line2 ' + '\n' + 'line3' # Строковая переменная с заданными строками
    print(z1, '- вывод', end='\n\n') # Вывод переменной с заданными строками
    a = 'line1 ' # Первая исходная строка
    b = 'line2 ' # Вторая исходная строка
    c = 'line3' # Третья исходная строка
    z1 = a + '\n' + b + '\n' + c # Сбор исходных строк в одну переменную
    print(z1, '- вывод') # Вывод собранной переменной
# 3
def s1409z3():
    # Наибольшим количеством способов создать строковую переменную, содержащую текст:s
    # \\\\
    # \\\
    # \\
    # \
    print('Семинар 14.09.21\nЗадание 3 - ', end='')
    print('''Наибольшим количеством способов создать строковую переменную, содержащую текст:\n \\\\\\\ \n \\\\\ \n \\\ \n \ ''', end='\n\n\n')

    z1='\\\\\\\ \n\\\\\ \n\\\ \n\\'
    print(z1, '- вывод', end='\n\n')

    # Мое решение
    for i in reversed(range(2, 5)): # Перевернутый цикл от 4 до 1
        print('\\' * i) # Вывод строки
    print('\\', '- вывод', end='\n\n') # Разделение ответов

    for i in range(4, 1, -1): # Обратный цикл от 4 до 1
        print('\\' * i) # Вывод строки
    print('\\', '- вывод', end='\n\n') # Разделение ответов

    z1 = '\\' * 4 + '\n' +  '\\' * 3 + '\n' + '\\' * 2 + '\n\\' # Строковая переменная с заданными строками
    print(z1, '- вывод') # Вывод строки
# 4
def s1409z4():
    # Вывести 5й с начала и 5й с конца символ из строки 'Hello world'
    print('Семинар 14.09.21\nЗадание 4 - ', end='')
    print("Вывести 5й с начала и 5й с конца символ из строки 'Hello world'", end='\n\n\n')

    st = 'Hello world'
    print(st[4],' ', st[-5], '- вывод')

    # Мое решение
    print(st[4:5], ' ', st[-5:-4], '- вывод') # Вывод срезов строки

    result = '' # Переменная для результата
    for i in range(len(st)): # Цикл от 0 до длины строки
        if i == 4 or i == len(st) - 5: # Проверка 5 символа с начала и конца
            result += st[i] + '   ' # Сохранение найденного символа
    result = result[:-2] + '- вывод' # Удаление лишних последних пробелов
    print(result) # Вывод результата
# 5
def s1409z5():
    # Двумя способами получить символ 'w' из строки 'Hello world'
    print('Семинар 14.09.21\nЗадание 5 - ', end='')
    print("Двумя способами получить символ 'w' из строки 'Hello world'", end='\n\n\n')

    st='Hello world'
    print(st[6],st[-5], '- вывод')

    # Мое решение
    print(st[6:7], st[-5:-4], '- вывод') # Вывод срезов строки

    for i in st: # Перебор символов в строке
        if i == 'w': # Если нашелся символ 'w'
            print(i, '- вывод') # Вывести этот символ
            break

    for i in reversed(range(len(st))): # Перевернутый цикл от длины строки до 0
        if st[i] == 'w': # Если нашелся символ 'w'
            print(st[i], '- вывод') # Вывести этот символ
            break
# 6
def s1409z6():
    # Вывести символ, находящийся в середине заранее низвестной строки, полученной с помощью функции input()
    print('Семинар 14.09.21\nЗадание 6 - ', end='')
    print('Вывести символ, находящийся в середине заранее низвестной строки, полученной с помощью функции input()', end='\n\n\n')

    s = input()
    print(s[len(s)//2], '- вывод')

    # Мое решение
    a = len(s) // 2 # Запись индекса среднего символа
    for i in range(len(s)): # Цикл от 0 до длины строки
        if i == a: # Если нашелся нужный индекс
            print(s[i], '- вывод') # Вывести символ под этим индексом
            break # Прервать цикл, так как два одинаковых индекса не может быть
# 7
def s1409z7():
    # Для строки 'Light ray' двумя способами получить подстроку с 1го по 4й символы включительно.
    print('Семинар 14.09.21\nЗадание 7 - ', end='')
    print("Для строки 'Light ray' двумя способами получить подстроку с 1го по 4й символы включительно.", end='\n\n\n')

    s='Light ray'
    print(s[0:4], '- вывод')
    print(s[-9:-5], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in s: # Перебор символов в строке
        if len(a) < 4: # Если длина найденной строки меньше 4
            a += i # То добавить найденный символ
        else: # Если длина равна или больше 4
            break # Прервать цикл
    print(a, '- вывод') # Вывод первого способа

    b = '' # Строковая переменная, будет хранить найденную строку
    while len(b) < 4: # Пока длина найденной строки меньше 4
        b += s[0] # Добавить первый символ строки
        s = s[1:] # Удалить первый символ строки
    print(b, '- вывод') # Вывод второго способа
# 8
def s1409z8():
    # Для строки 'My new text' двумя способами получить подстроку с 3го по 7й символы включительно.
    print('Семинар 14.09.21\nЗадание 8 - ', end='')
    print("Для строки 'My new text' двумя способами получить подстроку с 3го по 7й символы включительно.", end='\n\n\n')

    s='My new text'
    print(s[2:7], '- вывод')
    print(s[-9:-4], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in range(2, len(s)): # Перебор символов в строке от 2 индекса
        if len(a) < 5: # Если длина найденной строки меньше 5
            a += s[i] # То добавить найденный символ
        else: # Если длина равна или больше 5
            break # Прервать цикл
    print(a, '- вывод') # Вывод первого способа

    b = '' # Строковая переменная, будет хранить найденную строку
    s = s[2:] # Отрезаем ненужные символы
    while len(b) < 5: # Пока длина найденной строки меньше 5
        b += s[0] # Добавить первый символ строки
        s = s[1:] # Удалить первый символ строки
    print(b, '- вывод') # Вывод второго способа
# 9
def s1409z9():
    # Получить подстроку из последних 4х символов строки 'Light ray'.
    print('Семинар 14.09.21\nЗадание 9 - ', end='')
    print("Получить подстроку из последних 4х символов строки 'Light ray'.", end='\n\n\n')

    s='Light ray'
    print(s[-4:])

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in reversed(range(len(s))): # Перевернутый цикл от длины строки до 0
        if len(a) < 4: # Если длина найденной строки меньше 4
            a += s[i] # То добавляем найденный символ
        else: # Если длина равна или больше 4
            break # То остановить цикл
    a = a[::-1] # Переворачиваем строку, потому что мы добавляли символы с конца
    print(a, '- вывод') # Вывод первого способа

    print(s[len(s) - 4:], '- вывод') # Вывод второго способа
# 10
def s1409z10():
    # Составить строку из всех четных символов строки 'Light ray'.
    print('Семинар 14.09.21\nЗадание 10 - ', end='')
    print("Составить строку из всех четных символов строки 'Light ray'.", end='\n\n\n')

    s='Light ray'
    print(s[1::2], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in range(1, len(s), 2): # Цикл от 1 до длины строки с шагом 2
        a += s[i] # Добавление каждого второго символа
    print(a, '- вывод') # Вывод результата
# 11
def s1409z11():
    # Составить строку из всех нечетных символов строки 'Light ray'.
    print('Семинар 14.09.21\nЗадание 11 - ', end='')
    print("Составить строку из всех нечетных символов строки 'Light ray'.", end='\n\n\n')

    s='Light ray'
    print(s[::2], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in range(0, len(s), 2): # Цикл от 1 до длины строки с шагом 2
        a += s[i] # Добавление каждого второго символа
    print(a, '- вывод') # Вывод результата
# 12
def s1409z12():
    # Инвертировать (получить строку с обратной последовательностью символо) строку 'Light ray'.
    print('Семинар 14.09.21\nЗадание 12 - ', end='')
    print("Инвертировать (получить строку с обратной последовательностью символо) строку 'Light ray'.", end='\n\n')

    s='Light ray'
    print(s[::-1], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in reversed(range(len(s))): # Перевернутый цикл от длины строки до 0
        a += s[i] # Добавление символа
    print(a, '- вывод') # Вывод результата
# 13
def s1409z13():
    # Вывести c третьего с начала до предпоследнего символа заранее низвестной строки, полученной с помощью функции input().
    print('Семинар 14.09.21\nЗадание 13 - ', end='')
    print('Вывести c третьего с начала до предпоследнего символа заранее низвестной строки, полученной с помощью функции input().', end='\n\n\n')

    s = input()
    print(s[2:-1], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    for i in range(len(s)): # Цикл от 0 до длины строки
        if i != 0 and i != 1 and i != len(s) - 1: # Убираем условием первые два и последний символ
            a += s[i] # Добавляем символ
    print(a, '- вывод') # Вывод результата
# 14
def s1409z14():
    # Получить подстроку неизвестной заранее строки, содержащую половину символов строки и расположенную по середине строки.
    print('Семинар 14.09.21\nЗадание 14 - ', end='')
    print('Получить подстроку неизвестной заранее строки, содержащую половину символов строки и расположенную по середине строки.', end='\n\n\n')

    s = input()
    i = len(s)//4
    print(s[i:-i], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    b = len(s) // 2 # Индекс среднего элемента в строке
    i = 0 # Счетчик (сколько символов уже добавили)
    while len(a) < len(s) // 2 and (len(s) // 2) % 2 == 0: # Пока найденная строка меньше длины исходной строки / 2)
        a += s[b + i] # Добавить следующий элемент
        a = s[b - i - 1] + a # Добавить предыдущий элемент от старого найденного
        i += 1 # Обновление счетчика
    print(a, '- вывод') # Вывод результата
# 15
def s1409z15():
    # Проверить, содержит ли произвольная строка, прочитанная в обратную сторону, последовательность 'eno'
    print('Семинар 14.09.21\nЗадание 15 - ', end='')
    print("Проверить, содержит ли произвольная строка, прочитанная в обратную сторону, последовательность 'eno'", end='\n\n\n')

    s = input()
    s1 = 'eno'
    if s1 in s[::-1]:
        print('содержится', '- вывод')
    else:
        print('не содержится', '- вывод')

    # Мое решение
    if 'one' in s:
        print('содержится', '- вывод')
    else:
        print('не содержится', '- вывод')
# 16
def s1409z16():
    # Получить строку, начинающуюся с последних 3 символов стркои 'Light ray', а заканчивающуюся подстрокой с 1го до 4го символоа строки.
    print('Семинар 14.09.21\nЗадание 16 - ', end='')
    print("Получить строку, начинающуюся с последних 3 символов стркои 'Light ray', а заканчивающуюся подстрокой с 1го до 4го символоа строки.", end='\n\n\n')

    s='Light ray'
    print(s[-3:]+s[0:4], '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить найденную строку
    b = '' # Строковая переменная, будет хранить найденную строку
    for i in reversed(range(len(s))): # Перевернутый цикл от длины строки до 0
        if len(a) < 3: # Если длина найденной строки меньше 3
            a += s[i] # То добавить символ
        else: # Иначе остановить
            break
    for i in range(len(s)): # Цикл от 0 до длины строки
        if len(b) < 4: # Если длина второй найденной строки меньше 4
            b += s[i] # То добавить символ
        else: # Иначе остановить
            break
    a = a[::-1] # Перевернуть первую найденную строку, потому что она искалась в перевернутой строке
    print(a + b, '- вывод') # Вывод результата
# 17
def s1409z17():
    # Коротко записать создание строки 'oneoneoneoneoneonetwotwotwo'
    print('Семинар 14.09.21\nЗадание 17 - ', end='')
    print("Коротко записать создание строки 'oneoneoneoneoneonetwotwotwo'", end='\n\n\n')

    print('one'*6+'two'*3, '- вывод')

    # Мое решение
    a = '' # Строковая переменная, будет хранить созданную строку
    for i in range(6): # Цикл от 0 до 5
        a += 'one' # 6 раз добавить слово 'one'
    for i in range(3): # Цикл от 0 до 2
        a += 'two' # 3 раза добавить слово 'two'
    print(a, '- вывод') # Вывод результата
# 18
def s1409z18():
    # Разбить строку ' one,two,three,four,five,six,seven,eight,nine,ten ' на список из строк, состоящих только из названий цифр.
    print('Семинар 14.09.21\nЗадание 18 - ', end='')
    print("Разбить строку ' one,two,three,four,five,six,seven,eight,nine,ten ' на список из строк, состоящих только из названий цифр.", end='\n\n\n')

    s= ' one,two,three,four,five,six,seven,eight,nine,ten '
    print(s.replace(' ','').split(','), '- вывод')

    # Мое решение
    s = s[1:-1] # Удаляем пробелы в начале и конце
    a = s.split(',') # Разбиваем строку по элементам, избегая символа ','
    print(a, type(a), '- вывод') # Вывод результата
# 19 | 19-26 сделаны не на семинаре
def s1409z19():
    # Вставить между всеми символами строки 'Hello world' стрелочку '->' и сохранить результат
    # в строковой переменной(ожидаемый результат: 'H->e->l->l->o-> ->w->o->r->l->d')
    print('Семинар 14.09.21\nЗадание 19 - ', end='')
    print("Вставить между всеми символами строки 'Hello world' стрелочку '->' и сохранить результат\n"
          "в строковой переменной(ожидаемый результат: 'H->e->l->l->o-> ->w->o->r->l->d')", end='\n\n\n')

    s = 'Hello world'
    s = '->'.join(s)
    print(s)

    # Мое решение
    s = 'Hello world' # Исходная строка
    i = 1 # Номер символа, после которого надо вставить стрелочку
    while i < 31: # Цикл для вставки 10 символов (шаг - 3)
        s = s[:i] + '->' + s[i:] # Вставка стрелочки срезами
        i += 3 # Изменение номера символа на 3, потому что мы добавляем 2 символа для стрелки и переходим через следующий.
    print(s, '- вывод') # Вывод результата
# 20
def s1409z20():
    # Для двух произвольных строк провести сравнение на совпадение содержимого без учета регистра букв и начальных
    # и конечных пробельных символов. Например, для двух строк ' HeLLO WOrlD' и 'hello WORLD ' такое сравнение должно
    # возвращать True (содержание строк совпадает).
    print('Семинар 14.09.21\nЗадание 20 - ', end='')
    print("Для двух произвольных строк провести сравнение на совпадение содержимого без учета регистра букв и начальных\n"
          "и конечных пробельных символов. Например, для двух строк ' HeLLO WOrlD' и 'hello WORLD ' такое сравнение должно\n"
          "возвращать True (содержание строк совпадает).", end='\n\n\n')

    s1 = input()
    s1 = (s1.replace(' ', '').lower())

    s2 = input()
    s2 = (s2.replace(' ', '').lower())

    print(s1 == s2)

    # Мое решение
    s1 = input().lower().split() # Считывание строк, изменение всех регистров букв на нижний и разбив слов в строке на массив
    s2 = input().lower().split() # Тоже самое для второй строки
    if len(s1) == len(s2): # Если кол-во слов в строках одинаковое
        ok = True # Переменная для отслеживания равности строк
        for i in range(len(s1)): # Цикл от 0 до длин строк
            if s1[i] != s2[i]: # Если строки не равны (слова в исходных строках)
                ok = False # Запоминаем это
                break # И выходим из цикла
        print(ok) # Вывод результата (если строки равны, то будет True)
    else: # Если в строках разное кол-во слов
        print(False) # Выводить отрицательный результат
# 21
def s1409z21():
    # В строке 'hello hello Hello hello' средствами Python найти индекс второго вхождения подстроки 'hel'
    print('Семинар 14.09.21\nЗадание 21 - ', end='')
    print("В строке 'hello hello Hello hello' средствами Python найти индекс второго вхождения подстроки 'hel'", end='\n\n\n')

    s = 'hello hello Hello hello'
    i = s.find('hel')
    i = s.find('hel', i + 1)
    print(i)

    # Мое решение
    s = 'hello hello Hello hello' # Исходная строка
    a = [] # Массив с вхождениями
    i = 0 # Индекс символа, с которого будем искать вхождения
    while 'hel' in s[i:]: # Пока в строке с текущего индекса есть подстрока 'hel'
        a.append(s.find('hel', i)) # Добавить индекс вхождения (поиск первого вхождения после последнего найденного)
        i = a[-1] + 1 # Записать индекс найденного символа. +1, потому что надо искать дальше
    print(a[1]) # Вывод индекса второго вхождения
# 22
def s1409z22():
    # В строке 'hello hello Hello hello' средствами Python найти индекс второго с конца вхождения подстроки 'hel'
    print('Семинар 14.09.21\nЗадание 22 - ', end='')
    print("В строке 'hello hello Hello hello' средствами Python найти индекс второго с конца вхождения подстроки 'hel'", end='\n\n\n')

    s = 'hello hello Hello hello'
    i = s.rfind('hel')
    i = s.rfind('hel', 0, i - 1)
    print(i)

    # Мое решение
    s = 'hello hello Hello hello' # Исходная строка
    a = [] # Массив с вхождениями
    i = len(s) # Индекс символа, с которого будем искать вхождения
    while 'hel' in s[:i]: # Пока в строке до текущего индекса есть подстрока 'hel'
        a.append(s.rfind('hel', 0, i)) # Добавить индекс вхождения (поиск первого вхождения до последнего найденного)
        i = a[-1] # Записать индекс найденного символа. Не прибавляем один, потому что справа скобка не квадратная
    print(a[1]) # Вывод индекса второго вхождения с конца
# 23
def s1409z23():
    # Из заранее неизвестной строки вырезать подстроку, начинающуюся с 'he' и заканчивающееся 'on'
    # (протестировать на строке ' start hello python world'.
    print('Семинар 14.09.21\nЗадание 23 - ', end='')
    print("Из заранее неизвестной строки вырезать подстроку, начинающуюся с 'he' и заканчивающееся 'on'\n"
          "(протестировать на строке ' start hello python world'.", end='\n\n\n')

    s = input()
    print(s[s.find('he'):s.find('on') + 2])

    # Мое решение
    s = input() # Получение строки
    okHe = False # Нашлась ли подстрока 'he'
    he = 0 # Индекс подстроки 'he'
    on = 0 # Индекс подстроки 'on'
    for i in range(len(s) - 1): # Цикл от 0 до длины строки - 1, потому что буду смотреть текущий символ и следующий
        if okHe: # Если нашлась подстрока 'he'
            if s[i] + s[i + 1] == 'on': # Если найденная подстрока подходит
                on = i # Записать ее индекс
                break # И остановить цикл. Нам не важно что после этой подстроки
        else: # Если не нашлась подстрока 'he'
            if s[i] + s[i + 1] == 'he': # Если найденная подстрока подходит
                he = i # Записать ее индекс
                okHe = True # Записать, что такая подстрока нашлась
    print(s[he:on + 2]) # Вывод результата. +2, потому что подстроку 'on' надо включить в ответ
# 24
def s1409z24():
    # Используя цикл for и функцию enumerate() (см. лекцию 2) в вывести произвольную строку на экран
    # и при этомубрать все пробелы и на их месте вывести номер слова по счету
    # (пример: исходная строка 'hello hello Hello hello' -> выведено на экран 'hello1hello2Hello3hello4')
    print('Семинар 14.09.21\nЗадание 24 - ', end='')
    print("Используя цикл for и функцию enumerate() (см. лекцию 2) в вывести произвольную строку на экран\n"
          "и при этом убрать все пробелы и на их месте вывести номер слова по счету\n"
          "(пример: исходная строка 'hello hello Hello hello' -> выведено на экран 'hello1hello2Hello3hello4')", end='\n\n\n')

    s = input().split()
    for ind, symb in enumerate(s):
        print(symb, ind + 1, sep='', end='')
    print()

    # Мое решение
    s = input().split() # Исходная строка
    for i, c in enumerate(s): # Цикл с функцией enumerate
        print(c + str(i + 1), end='') # Вывод строка + номер
    print()
# 25
def s1409z25():
    #  Сформировать строку форматирования, которая для вызова format('val1', 'val2', 'val3')
    #  будет возрващать следующий результат: 'val3-val2-val1-val2-val3'
    print('Семинар 14.09.21\nЗадание 25 - ', end='')
    print(" Сформировать строку форматирования, которая для вызова format('val1', 'val2', 'val3')\n"
          "будет возрващать следующий результат: 'val3-val2-val1-val2-val3'", end='\n\n\n')

    print('{2}-{1}-{0}-{1}-{2}'.format('val1', 'val2', 'val3'))

    # Мое решение
    # Нет
# 26
def s1409z26():
    # Сформировать строку форматирования fs, которая на при использовании в нижеследующем коде приводит
    # к формированию таблицы, выведенной в следующей ячейке.
    print('Семинар 14.09.21\nЗадание 26 - ', end='')
    print("Сформировать строку форматирования fs, которая на при использовании в нижеследующем коде приводит\n"
          "к формированию таблицы, выведенной в следующей ячейке.", end='\n\n\n')

    print("""0123456789012345678901234567890123456789
|  1|###59.06|     453|00000001|
|  5|##159.00| 123,453|00000111|
| 15|#-159.10|-     12|00010000|
|105|-1059.10|   1,200|11111111|""")

    print('0123456789' * 4)
    def f(a, b, c, d):
        s2 = '|{: >3}|{:#>8.2f}|{:=8}|{:0>8}|'.format(a, b, c, d)
        return s2
    print(f(1, 59.06, 453, 1))
    print(f(5, 159.00, 123.453, 111))
    print(f(15, -159.10, -12, 10000))
    print(f(105, -1059.10, 1200, 1111111))

    print('0123456789' * 4)
    def f(a, b, c, d):
        s2 = f'|{a: >3}|{b:#>8.2f}|{c:=8}|{d:0>8}|'
        return s2
    print(f(1, 59.06, 453, 1))
    print(f(5, 159.00, 123.453, 111))
    print(f(15, -159.10, -12, 10000))
    print(f(105, -1059.10, 1200, 1111111))

    # Мое решение
    # Нет


# Семинар 21.09.21
# 1
def s2109z1():
    # С помощью цикла for сравнить две произвольные строки и вывести строку, состоящую из общих символов исходных строк.
    print('Семинар 21.09.21\nЗадание 1 - ', end='')
    print('С помощью цикла for сравнить две произвольные строки и вывести строку, состоящую из общих символов исходных строк.', end='\n\n\n')

    letters = string.ascii_letters # Все буквы английского алфавита для генерации строк
    s1 = '' # Первая строка
    s2 = '' # Вторая строка
    for i in range(random.randint(1, 100)): # Цикл для генерации строк случайной длины
        s1 += letters[random.randint(0, len(letters) - 1)] # Прибавление к строкам случайного символа
        s2 += letters[random.randint(0, len(letters) - 1)]
    print(s1, '- ввод') # Вывод полученных строк
    print(s2, '- вывод')

    result1 = '' # Результат, если надо найти общие символы, стоящие на разных местах (алфавит строк)
    result2 = '' # Результат, если надо найти общие символы, стоящие на одинаковых местах

    for i in s1: # Циклы по двум строкам для нахождения первого результата
        for j in s2:
            if i == j: # Если нашли общий символ
                if not i in result1: # Если он не был найден ранее
                    result1 += i # Добавить найденный символ в результат

    # Только для строк одинаковой длины
    for i in range(len(s1)): # Цикл от 0 до длины строки для нахождения второго результата
        if s1[i] == s2[i]: # Если символы с одинаковыми индексами равны
            result2 += s1[i] # Добавить найденный символ в результат

    print(result1, '- общие символы') # Вывод результатов
    print(result2, '- символы с одинаковыми индексами')
# 2
def s2109z2():
    # С помощью цикла while ассчитать двойной факториал для произвольного числа. Двойной факториал *n!!* числа n рассчитывается
    # как произведение всех чисел, меньших исходного на числа, кратные двум (вплоть до 1 или 2). Например: 7!! = 7 \\* 5 \\* 3 \\* 1 = 105
    print('Семинар 21.09.21\nЗадание 2 - ', end='')
    print('С помощью цикла while рассчитать двойной факториал для произвольного числа. Двойной факториал *n!!* числа n рассчитывается\nкак произведение всех чисел, меньших исходного на числа, кратные двум (вплоть до 1 или 2). Например: 7!! = 7 \\* 5 \\* 3 \\* 1 = 105', end='\n\n\n')

    n = random.randint(1, 10) # Генерация случайного числа
    print(n, '- ввод') # Вывод полученного числа

    k = n - 2 # Число, на которое надо умножать
    while k > 1: # Цикл while, который будет работать до 2
        n *= k # Вычисление факториала
        k -= 2 # Вычитание 2 из числа, на которое надо умножить, так как нужно рассчитать двойной факториал

    print(n, '- вывод') # Вывод результата
# 3
def s2109z3():
    # Решить предыдущую задачу с помощью цикла for.
    print('Семинар 21.09.21\nЗадание 3 - ', end='')
    print('С помощью цикла for рассчитать двойной факториал для произвольного числа. Двойной факториал *n!!* числа n рассчитывается\n'
          'как произведение всех чисел, меньших исходного на числа, кратные двум (вплоть до 1 или 2). Например: 7!! = 7 \\* 5 \\* 3 \\* 1 = 105', end='\n\n\n')

    n = random.randint(1, 10) # Генерация случайного числа
    print(n, '- ввод') # Вывод полученного числа

    for i in range(n - 2, 0, -2): # Цикл for с шагом -2, так как нужно рассчитать двойной факториал
        n *= i # Вычисление факториала

    print(n, '- вывод') # Вывод результата
# 4
def s2109z4():
    # Вывести все простые числа в произвольном интервале [a, b], используя вложенные for и конструкцию for-else.
    print('Семинар 21.09.21\nЗадание 4 - ', end='')
    print('# Вывести все простые числа в произвольном интервале [a, b], используя вложенные for и конструкцию for-else.', end='\n\n\n')

    a = random.randint(1, 100) # Генерация случайного начала интервала
    b = random.randint(a + 1, a + 100) # Генерация случайного конца интервала
    print(a, b, '- ввод') # Вывод полученного интервала

    result = [] # Массив с результатом (простыми числами)

    for i in range(a, b + 1): # Цикл по интервалу
        for j in range(2, i): # Цикл от 2 до текущего числа не включительно
            if i % j == 0: # Если найденное число - делитель
                break # То остановить цикл
        else:
            result.append(i) # Если не нашли делитель, то число - простое

    print(*result, '- вывод') # Вывод результата
# 5
def s2109z5():
    #  Реализовать проверку на ввод вводимого пользователем значения: предлагать ввод до тех пор, пока не будет введена непустая строка.
    #  Если введено STOP, выводить сообщение \"Program interrupted by user\". Если введенная строка в лексиграфическом порядке стоит перед
    #  строчными латинскими символами, выводить предупреждение \"Too early in the dictionary. Try again!\" и предлагать ввод снова. Иначе
    #  выводить отформатированную исходную строку с заполнителем \"_\" и шириной 30 символов с выравниванием посередине.
    print('Семинар 21.09.21\nЗадание 5 - ', end='')
    print('Реализовать проверку на ввод вводимого пользователем значения: предлагать ввод до тех пор, пока не будет введена непустая строка.\n'
          'Если введено STOP, выводить сообщение \"Program interrupted by user\". Если введенная строка в лексиграфическом порядке стоит перед\n'
          'строчными латинскими символами, выводить предупреждение \"Too early in the dictionary. Try again!\" и предлагать ввод снова. Иначе\n'
          'выводить отформатированную исходную строку с заполнителем \"_\" и шириной 30 символов с выравниванием посередине.', end='\n\n\n')

    ok = True # Переменная состояния цикла while
    while ok: # Пока переменная ok имеет значение True
        s = input() # Получение строки из консоли
        if s == 'STOP': # Если строка 'STOP', то выводить сообщение и прекращать работу программы
            print('Program interrupted by user')
            ok = False
        if s == '': # Если строка пуста, прогонять цикл заново
            pass
        else: # Если строка состоит из символов
            for i in s: # Цикл перебора символов в полученной строке
                if ord(i) < ord('A') or ord(i) > ord('z'): # Проверка на лишние символы (перед латиницей или после нее)
                    print('Too early in the dictionary. Try again!') # Если есть то выводить сообщение и заканчивать цикл for
                    break
            else: # Если в строке нет лишних символов
                ok = False # Останавливать цикл while (после выполнения кода ниже while работать не будет)
                if len(s) >= 30: # Если длина строки больше или равна 30, то выводить первые 30 символов
                    print(s[:30])
                else: # Иначе выводить строку с заполнением
                    result = '_\\' * ((30 - len(s)) // 4) + s # Заполнение слева
                    if len(s) % 2 != 0: # Если длина исходной строки не кратна 2, то прибавляем случайный символ
                        result += string.ascii_lowercase[random.randint(0, 25)] # ... то прибавляем случайный символ
                    result += '_\\' * ((30 - len(result)) // 2) # Добавляем заполнения, учитывая длину текущей строки
                    print(result) # Вывод результата
# 6
def s2109z6():
    # Для произвольной строки вывести те символы, номера которых в строке (не индексы!) делят длину строки без остатка.
    # Для строки \"Hello world!\" должно выводиться \"Hell !\".
    print('Семинар 21.09.21\nЗадание 6 - ', end='')
    print('Для произвольной строки вывести те символы, номера которых в строке (не индексы!) делят длину строки без остатка.\n'
          'Для строки \"Hello world!\" должно выводиться \"Hell !\".', end='\n\n\n')

    letters = string.ascii_letters # Все буквы английского алфавита для генерации строк
    s = '' # Произвольная строка
    for i in range(random.randint(1, 20)): # Цикл для генерации строки случайной длины
        s += letters[random.randint(0, len(letters) - 1)] # Прибавление к строке случайного символа
    print(s, '- ввод') # Вывод полученной строки

    l = len(s) # Длина полученной строки
    result = '' # Нужные символы

    for i in range(l): # Цикл от 0 до длины строки
        if l % (i + 1) == 0: # Если номер буквы (индекс + 1, так как индекс начинается с 0) делит строку без остатка
            result += s[i] # То записываем найденный символ

    print(result, '- вывод') # Вывод результата
# 7
def s2109z7():
    # Даны две произвольные строки. Для всех символов первой строки, которые встречаются во второй строке (без учета регистра),
    # вывести строку: \"<номер\\_символа\\_в\\_первой\\_строке> встречается в строке поиска: <второе_слово>\", причем второе
    # слово выводить в нижнем регистре с найденным символом в верхнем регистре. Например, для исходной строки \"Hello world!\"
    # и строки поиска 'HERD' третья строка в выводе будет содержать текст:<br> \"9 символ встречается в строке поиска: heRd\".
    print('Семинар 21.09.21\nЗадание 7 - ', end='')
    print('Даны две произвольные строки. Для всех символов первой строки, которые встречаются во второй строке (без учета регистра),\n'
          'вывести строку: \"<номер\\_символа\\_в\\_первой\\_строке> встречается в строке поиска: <второе_слово>\", причем второе\n'
          'слово выводить в нижнем регистре с найденным символом в верхнем регистре. Например, для исходной строки \"Hello world!\"\n'
          'и строки поиска "HERD" третья строка в выводе будет содержать текст:<br> \"9 символ встречается в строке поиска: heRd\".', end='\n\n\n')

    letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
    s1 = '' # Первая строка
    s2 = '' # Вторая строка
    for i in range(random.randint(20, 100)): # Цикл для генерации строки случайной длины
        s1 += letters[random.randint(0, len(letters) - 1)] # Прибавление к строке случайного символа
    for i in range(random.randint(1, min(len(s1) - 1, len(letters)))): # Цикл для генерации строки поиска случайной длины. Цикл либо до кол-ва символом, либо до длины строки.
        letter = random.randint(0, len(letters) - 1) # Выбор случайного символа
        s2 += letters[letter] # Прибавление к строке случайного символа
        letters = letters[:letter] + letters[letter + 1:] # Удаление выбранного символа, чтобы символы в строке поиска не повторялись
    print(s1, '- ввод') # Вывод полученных строк
    print(s2, '- ввод')

    s1 = s1.lower() # Изменение регистра строки
    s2 = s2.lower() # Изменение регистра строки

    result1 = [] # Номера символов в первой строке
    result2 = [] # Номера символов во второй строке

    for i in range(len(s1)): # Цикл перебора символов через индексы
        for j in s2: # Цикл перебора символов
            if s1[i] == j: # Если нашлись одинаковые символы
                if not (str(i) in result1): # Если они не были найдены ранее
                    result1.append(i) # Записать номер символа в первой строке
                    result2.append(s2.index(j)) # Записать номер символа во второй строке

    for i in range(len(result1)): # Цикл от 0 до кол-ва найденных результатов
        print(result1[i] + 1, 'символ встречается в строке поиска:', s2[:result2[i]] + s2[result2[i]].upper() + s2[result2[i] + 1:], '- вывод') # Вывод результатов


# Семинар 28.09.21
# 1
def s2809z1():
    # Дана строка 'aaa--bbb==ccc__ddd'. Написать регулярное выражение для разбивки строки на список ['aaa','bbb','ccc','ddd'].
    print('Семинар 28.09.21\nЗадание 1 - ', end='')
    print("Дана строка 'aaa--bbb==ccc__ddd'. Написать регулярное выражение для разбивки строки на список ['aaa','bbb','ccc','ddd'].", end='\n\n\n')

    s = 'aaa--bbb==ccc__ddd' # Исходная строка
    print(s, '- ввод')
    s = s.replace('-', ' ') # Замена символа "-"
    s = s.replace('=', ' ') # Замена символа "="
    s = s.replace('_', ' ') # Замена символа "_"
    result = s.split() # Превращение строки в список. Элементы определяются пробелами (элементы отделены пробелами, которые удаляются)
    print(result, type(result), '- вывод') # Вывод результата
# 2
def s2809z2():
    # Получить первое слово из произвольной строки.
    # Например, для 'Yesterday, All my troubles seemed so far away' должно возвращаться 'Yesterday'.
    print('Семинар 28.09.21\nЗадание 2 - ', end='')
    print("Получить первое слово из произвольной строки.\n"
          "Например, для 'Yesterday, All my troubles seemed so far away' должно возвращаться 'Yesterday'.", end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        s = '' # Произвольная строка
        letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10) # Генерация количества слов в строке
        for i in range(words): # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)): # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)] # Добавляем к строке символы
            s += ' ' # После добавления полученного слова вставить пробел
        s = s[:-1] # Удалить последний(лишний) пробел
        print(s, '- ввод') # Вывод полеченной строки
        CheckString(s) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s): # Функция проверки строки
        if len(s) == 0: # Если строка пустая
            print('Строка пустая\n\nСоздаем новую строку:') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        elif s.count(' ') == 0: # Если в строке нет пробелов, то есть в ней всего одно слово
            print(s, '- вывод') # Вывод строки
        else: # Если в строке есть пробелы, то в этой строке несколько слов
            print(s[:s.find(' ')], '- вывод') # Выводить слово до первого пробела. Это будет первое слово в строке

    GenerateString() # Создаем новую строку с помощью функции генерации строк
# 3 - по списку
def s2809z3():
    # Получить последнее слово из произвольной строки.
    print('Семинар 28.09.21\nЗадание 3 - ', end='')
    print('Получить последнее слово из произвольной строки.', end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        s = '' # Произвольная строка
        letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10) # Генерация количества слов в строке
        for i in range(words): # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)): # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)] # Добавляем к строке символы
            s += ' ' # После добавления полученного слова вставить пробел
        s = s[:-1] # Удалить последний(лишний) пробел
        print(s, '- ввод') # Вывод полеченной строки
        CheckString(s) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s): # Функция проверки строки
        if len(s) == 0: # Если строка пустая
            print('Строка пустая\n\nСоздаем новую строку:') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        elif s.count(' ') == 0: # Если в строке нет пробелов, то есть в ней всего одно слово
            print(s, '- вывод') # Вывод строки
        else: # Если в строке есть пробелы, то в этой строке несколько слов
            print(s[s.rfind(' ') + 1:], '- вывод') # Выводить слово после последнего пробела. Это будет последнее слово в строке

    GenerateString() # Создаем новую строку с помощью функции генерации строк
# 4
def s2809z4():
    # В следующем отрывке найти все слова, которые начинаются на гласную букву:
    print('Семинар 28.09.21\nЗадание 4 - ', end='')
    print('В следующем отрывке найти все слова, которые начинаются на гласную букву:', end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        s = '' # Произвольный текст
        letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
        lines = random.randint(0, 10) # Генерация количества строк в тексте
        for i in range(lines): # Цикл от 0 до количества строк
            words = random.randint(0, 10) # Генерация количества слов в строке
            for o in range(words): # Цикл от 0 до количества слов
                for j in range(random.randint(0, 20)): # Цикл для генерации слов длины от 1 до 20
                    s += letters[random.randint(0, len(letters) - 1)] # Добавляем к строке символы
                s += ' ' # После добавления полученного слова вставить пробел
            s += '\n' # После добавления полученной строки вставить символ переноса на следующую строку
        s = s[:-2] # Удалить последние(лишние) пробел и перенос на новую строку
        print(s, '- ввод\n') # Вывод полеченной строки
        CheckString(s) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s): # Функция проверки строки
        if len(s) == 0: # Если строка пустая
            print('Текст пустой\n\nСоздаем новый текст:') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        elif s.replace('\n', '').replace(' ', '') == '': # Если строка состоит только из символов переноса строки (все строки пустые)
            print('Текст состоит только из переносов на новую строку\n\nСоздаем новый текст') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        else: # Значит в строке есть слова, то
            s = s.replace('\n', ' ') # Удалить символы переноса на новую строку
            glasn = 'aeiouy' # Все гласные английского алфавита
            l = s.split() # Разбив строки на массив.
            for i in l: # Перебор слов полученного массива
                if i[0] in glasn: # Если первый символ в текущем элементе массива есть в строке "гласные"
                    print(i, '- вывод') # То выводить слово

    GenerateString() # Создаем новый текст с помощью функции генерации строк
# 5
def s2809z5():
    # В этом же отрывке найти первое слово каждой строки
    print('Семинар 28.09.21\nЗадание 5 - ', end='')
    print('В этом же отрывке найти первое слово каждой строки', end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        s = '' # Произвольный текст
        letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
        lines = random.randint(0, 10) # Генерация количества строк в тексте
        for i in range(lines): # Цикл от 0 до количества строк
            words = random.randint(0, 10) # Генерация количества слов в строке
            for o in range(words): # Цикл от 0 до количества слов
                for j in range(random.randint(0, 20)): # Цикл для генерации слов длины от 1 до 20
                    s += letters[random.randint(0, len(letters) - 1)] # Добавляем к строке символы
                s += ' ' # После добавления полученного слова вставить пробел
            s += '\n' # После добавления полученной строки вставить символ переноса на следующую строку
        s = s[:-2] # Удалить последние(лишние) пробел и перенос на новую строку
        print(s, '- ввод') # Вывод полеченной строки
        CheckString(s) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s): # Функция проверки строки
        if len(s) == 0: # Если строка пустая
            print('Текст пустой\n\nСоздаем новый текст:') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        elif s.replace('\n', '').replace(' ', '') == '': # Если строка состоит только из символов переноса строки (все строки пустые)
            print('Текст состоит только из переносов на новую строку\n\nСоздаем новый текст') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        else: # Значит в строке есть слова, то
            l = s.split('\n') # Превращаем строку в массив, элементы были разделены символом переноса на новую строку
            for i in range(len(l)): # Цикл от 0 до длины строки
                print(i + 1, end=' - ') # Выводим порядковый номер проверяемой строки
                if len(l[i]) == 0: # Если строка пустая
                    print('строка пустая')
                elif l[i].count(' ') == 0: # Если в строке нет пробелов, то это строка из одного слова
                    print(l[i])
                else: # Если пробелов много, то выводить символы до первого пробела
                    print(l[i][:l[i].find(' ')])

    GenerateString() # Создаем новый текст с помощью функции генерации строк
# 6
def s2809z6():
    # Проверить корректность введенного E-mail
    print('Семинар 28.09.21\nЗадание 6 - ', end='')
    print('Проверить корректность введенного E-mail', end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        s = '' # Произвольный текст
        letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
        p = [1, 2, 3, 4, 5] # Массив с порядком символов в строке
        random.shuffle(p) # Перемешиваем массив
        s1 = random.randint(0, 1) # 0 - в строке не будет символа "@", 1 - будет
        s2 = random.randint(0, 1) # 0 - в строке не будет символа ".", 1 - будет
        # s1 = 1
        # s2 = 1

        for i in p: # Цикл по массиву с порядком символов в строке
            if i % 2 == 1: # Если операции 1, 3, 5
                for j in range(random.randint(0, 10)): # Цикл от 0 до 10
                    s += letters[random.randint(0, len(letters) - 1)] # Добавляем английские символы
            elif i == 2: # Если операция 2
                if s1: # И в строке будет символ "@"
                    s += '@' # Добавляем символ "@"
            elif i == 4: # Если операция 4
                if s2: # И в строке будет символ "."
                    s += '.' # Добавляем символ "."

        print(s, '- ввод') # Вывод полеченной строки
        CheckString(s) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s): # Функция проверки строки
        if len(s) == 0: # Если строка пустая
            print('Строка пустая\n\nСоздаем новую строку:') # Выводить сообщение об ошибке
            GenerateString() # Заново генерировать строку
        else: # Если строка не пустая
            if '@' in s and '.' in s: # Проверка наличия символов "@" и "."
                ok = True # Корректен ли E-mail
                if s.count('@') != 1: # Если в строне 0 или больше 1 символов "@"
                    ok = False
                    print('Должен быть только один символ "@"')
                if s.index('@') > s.find('.'): # Если символ "@" стоит после "."
                    ok = False
                    print('Символ "@" должен быть до точки')
                if '..' in s: # Если встречаются две точки подряд
                    ok = False
                    print('Не должно быть двух точек подряд')
                if s.rfind('.') < len(s) - 5 or s.rfind('.') > len(s) - 3: # Если после последней точки меньше 2 или больше 4 символов
                    ok = False
                    print('После последней точки должно быть от 2 до 4 символов включительно')
                if s.rfind('.') - s.index('@') < 3: # Если между последней точкой и символом "@" меньше 2 символов
                    ok = False
                    print('Между последней точкой и символом "@" должно быть как минимум 2 символа')
                if '@.' in s: # Если символы "@" и "." встречаются рядом
                    ok = False
                    print('Символы "@" и "." не должны стоять рядом')
                if s.index('@') < 4: # Если перед символом "@" меньше 4 символов
                    ok = False
                    print('Символ "@" должен стоять как минимум после 4 символов')
                if ' ' in s: # Если встречается пробел
                    ok = False
                    print('Не должно быть пробелов')

                z = [",", ":", ";", "!", "#", "%", "*", "(", ")", "=", "+", "{", "}", "[", "]/", '"', "'", "/", "\\", "|"] # Запрещенные символы
                for i in z: # Цикл по массиву с запрещенными символами
                    if i in s: # Если запрещенный символ встречается в строке
                        ok = False
                        print('Встречаются запрещенные символы')
                        break # Останавливать цикл, потому что строка уже не подходит

                if ok: # Если E-mail корректен
                    print('E-mail корректен - вывод')
                else: # Если E-mail некорректен
                    print('E-mail некорректен - вывод\n')
                    GenerateString() # То генерируем новый E-mail
            else:
                print('Должны быть символы "@" и "."')
                print('E-mail некорректен - вывод\n')
                GenerateString() # Если в строке нет символов "@" или ".", то генерировать новую строку

    GenerateString() # Создаем новый текст с помощью функции генерации строк
# 7
def s2809z7():
    # В следующей строке найти все email-адреса и вывести только доменные имена
    print('Семинар 28.09.21\nЗадание 7 - ', end='')
    print('В следующей строке найти все email-адреса и вывести только доменные имена', end='\n\n\n')

    def GenerateString(): # Функция генерации строки
        r = []
        for i in range(1000):
            s = '' # Произвольный текст
            letters = string.ascii_lowercase # Все буквы английского алфавита для генерации строк
            p = [1, 2, 3, 4, 5] # Массив с порядком символов в строке
            random.shuffle(p) # Перемешиваем массив
            s1 = random.randint(0, 1) # 0 - в строке не будет символа "@", 1 - будет
            s2 = random.randint(0, 1) # 0 - в строке не будет символа ".", 1 - будет
            # s1 = 1
            # s2 = 1

            for i in p: # Цикл по массиву с порядком символов в строке
                if i % 2 == 1: # Если операции 1, 3, 5
                    for j in range(random.randint(0, 10)): # Цикл от 0 до 10
                        s += letters[random.randint(0, len(letters) - 1)] # Добавляем английские символы
                elif i == 2: # Если операция 2
                    if s1: # И в строке будет символ "@"
                        s += '@' # Добавляем символ "@"
                elif i == 4: # Если операция 4
                    if s2: # И в строке будет символ "."
                        s += '.' # Добавляем символ "."

            r.append(s)

        print(r, '- ввод') # Вывод полеченной строки
        CheckString(r) # Вызов функции проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(r): # Функция проверки строки
        for s in r:
            if len(s) > 0:  # Если строка не пустая
                if '@' in s and '.' in s:  # Проверка наличия символов "@" и "."
                    ok = True  # Корректен ли E-mail
                    if s.count('@') != 1:  # Если в строне 0 или больше 1 символов "@"
                        ok = False
                    if s.index('@') > s.find('.'):  # Если символ "@" стоит после "."
                        ok = False
                    if '..' in s:  # Если встречаются две точки подряд
                        ok = False
                    if s.rfind('.') < len(s) - 5 or s.rfind('.') > len(
                            s) - 3:  # Если после последней точки меньше 2 или больше 4 символов
                        ok = False
                    if s.rfind('.') - s.index('@') < 3:  # Если между последней точкой и символом "@" меньше 2 символов
                        ok = False
                    if '@.' in s:  # Если символы "@" и "." встречаются рядом
                        ok = False
                    if s.index('@') < 4:  # Если перед символом "@" меньше 4 символов
                        ok = False
                    if ' ' in s:  # Если встречается пробел
                        ok = False

                    z = [",", ":", ";", "!", "#", "%", "*", "(", ")", "=", "+", "{", "}", "[", "]/", '"', "'", "/", "\\",
                         "|"]  # Запрещенные символы
                    for i in z:  # Цикл по массиву с запрещенными символами
                        if i in s:  # Если запрещенный символ встречается в строке
                            ok = False
                            break  # Останавливать цикл, потому что строка уже не подходит

                    if ok:  # Если E-mail корректен
                        print(s[s.index('@') + 1:], '(' + s + ') - вывод')

    GenerateString() # Создаем новый текст с помощью функции генерации строк
# 8
def s2809z8():
    # Проверить корректность введенного номера мобильного телефона. Корректными считаются:
    # "+7(999)999-99-99", (1)
    # "+7 (999) 999-99-99", (2)
    # "+7 999 999-99-99", (3)
    # "+7 999 999 99 99", (4)
    # "+79999999999" (5)
    print('Семинар 28.09.21\nЗадание 8 - ', end='')
    print('Проверить корректность введенного номера мобильного телефона. Корректными считаются:\n'
          '"+7(999)999-99-99",\n'
          '"+7 (999) 999-99-99",\n'
          '"+7 999 999-99-99",\n'
          '"+7 999 999 99 99",\n'
          '"+79999999999"', end='\n\n\n')

    s = input()

    if len(s) == 0: # Проверка на пустую строку
        print('Строка пустая')
    elif len(s) > 1: # Если в строке больше 1 символа
        if s[0] + s[1] != '+7': # Проверка кода страны
            print('Номер некорректен')
        else:
            if len(s) == 16: # Проверка длины строки для первого, третьего и четвертого способов
                if s[2] == '(' and s[3:6].isdigit() and s[6] == ')' and s[7:10].isdigit() and s[10] == '-' \
                        and s[11:13].isdigit() and s[13] == '-' and s[14:16].isdigit(): # Проверка первого способа
                    print('Номер корректен')
                elif s[2] == ' ' and s[3:6].isdigit() and s[6] == ' ' and s[7:10].isdigit(): # Проверка символов для третьего и четвертого способа
                    if s[10] == '-' and s[11:13].isdigit() and s[13] == '-' and s[14:].isdigit(): # Проверка третьего способа
                        print('Номер корректен')
                    elif s[10] == ' ' and s[11:13].isdigit() and s[13] == ' ' and s[14:].isdigit(): # Проверка четвертого способа
                        print('Номер корректен')
                    else:
                        print('Номер некорректен')
                else:
                    print('Номер некорректен')
            elif len(s) == 18: # Проверка длины строки для второго способа
                if s[3] == '(' and s[4:7].isdigit() and s[7:9] == ') ' and s[9:12].isdigit() and s[12] == '-' \
                        and s[13:15].isdigit() and s[15] == '-' and s[16:18].isdigit(): # Проверка второго способа
                    print('Номер корректен')
                else:
                    print('Номер некорректен')
            elif len(s) == 12: # Проверка длины строки для последнего символа
                if s[2:].isdigit(): # Проверка последнего способа
                    print('Номер корректен')
                else:
                    print('Номер некорректен')
            else:
                print('Номер некорректен')
    else:
        print('Номер некорректен')

    # if s[0] + s[1] != '+7': # Проверка кода страны
    #     print('Номер некорректен')
    # else: # Если все верно
    #     if s[2] == '(' and s[3:6].isdigit() and s[6] == ')' and s[7:10].isdigit() and s[10] == '-' and s[11:13].isdigit() \
    #             and s[13] == '-' and s[14:16].isdigit() and len(s) == 16: # Проверка первого способа
    #         print('Номер корректен')
    #     elif s[2:].isdigit() and len(s) == 12: # Проверка последнего способа
    #         print('Номер корректен')
    #     elif s[2] == ' ': # Проверка 3 символа для 2-4 способов
    #         if s[3] == '(' and s[4:7].isdigit() and s[7:9] == ') ' and s[9:12].isdigit() and s[12] == '-' \
    #                 and s[13:15].isdigit() and s[15] == '-' and s[16:18].isdigit() and len(s) == 18: # Проверка второго способа
    #             print('Номер корректен')
    #         elif s[3:6].isdigit() and s[6] == ' ' and s[7:10].isdigit(): # Проверка 3 цифр, пробела и 3 цифр для 3-4 способов
    #             if s[10] == '-' and s[11:13].isdigit() and s[13] == '-' and s[14:].isdigit() and len(s) == 16: # Проверка третьего способа
    #                 print('Номер корректен')
    #             elif s[10] == ' ' and s[11:13].isdigit() and s[13] == ' ' and s[14:].isdigit() and len(s) == 16: # Проверка четвертого способа
    #                 print('Номер корректен')
    #             else:
    #                 print('Номер некорректен')
    #         else:
    #             print('Номер некорректен')
    #     else:
    #         print('Номер некорректен')


# Семинар 05.10.21
# 1
def s0510z1():
    # Создать список из чисел 31, 24, 17 тремя способами: перечисление, на основе другого списка (по сути, создать
    # копию списка), с помощью функции range. Вывести списки на печать.
    # Создать и вывести список, состоящий из полученных списков.
    print('Семинар 05.10.21\nЗадание 1 - ', end='')
    print('Создать список из чисел 31, 24, 17 тремя способами: перечисление, на основе другого\n'
          'списка (по сути, создать копию списка), с помощью функции range. Вывести списки на печать. Создать и\n'
          'вывести список, состоящий из полученных списков."', end='\n\n\n')

    a1 = []  # Первый способ: с помощью range с положительным шагом
    a2 = []  # Второй способ: с помощью range с отрицательным шагом
    a3 = []  # Третий способ с помощью копии другого списка

    for i in range(17, 32, 7):  # Цикл от 17 до 31 с шагом 7
        a1.append(i)

    for i in range(31, 16, -7):  # Цикл от 31 до 17 с шагом -7
        a2.append(i)
    a2 = a2[::-1]  # Переворачиваем список, потому что элементы идут в порядке убывания из-за обратного шага

    for i in a1:  # Цикл по первому списку
        a3.append(i)  # Добавление в третий список элементов из первого

    r = a1 + a2 + a3  # Список, состоящий из полученных списков

    print(a1, '- вывод')  # Вывод результата
    print(a2, '- вывод')
    print(a3, '- вывод')
    print(r, '- вывод')
# 2
def s0510z2():
    # 2.1) Создать список из всех симоволов имеющихся во введенной пользователем строке.
    # 2.2) Создать список из всех слов имеющихся во введенной пользователем строке.
    # 2.3) Создать и вывести список из всех цифр, встречающихся в заданной строке.
    print('Семинар 05.10.21\nЗадание 2 - ', end='')
    print("2.1) Создать список из всех симоволов имеющихся во введенной пользователем строке.\n"
          "2.2) Создать список из всех слов имеющихся во введенной пользователем строке.\n"
          "2.3) Создать и вывести список из всех цифр, встречающихся в заданной строке.", end='\n\n\n')

    a = input() # Получение строки

    r1 = [] # Список для всех символов в строке
    r2 = a.split() # Список для всех слов в строке
    r3 = [] # Список для всех цифр в строке

    for i in a:  # Проход по строке
        if i.isdigit(): # Если встретилась цифра
            if not (i in r3): # И она встречается в первый раз
                r3.append(i) # Записать эту цифру
        else: # Если это символ
            if not (i in r1) and i != ' ': # Это не пробел и он встречается в первый раз
                r1.append(i) # Записать этот символ

    print(r1, '- вывод 2.1') # Вывод результата
    print(r2, '- вывод 2.2')
    print(r3, '- вывод 2.3')
# 3
def s0510z3():
    # Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же
    # копий всех элементов, не считая последних двух (последние два просто добавить). Например, список
    # ['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].
    print('Семинар 05.10.21\nЗадание 3 - ', end='')
    print("Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же\n"
          "копий всех элементов, не считая последних двух (последние два просто добавить). Например, список\n"
          "['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].", end='\n\n\n')

    # Если вводить через строку
    a = input('Введите элементы через пробелы: ').split()  # Получение списка и его разделение на список по пробелам

    # Если вводить через список
    # a = input('Введите список: ') # Получение списка
    # a = a[1:-1]
    # a = a.replace("'", '')
    # a = a.replace(',', '')
    # a = a.split()

    if 'repeat' in a:  # Проверка на элемент 'repeat' в полученном списке
        if a[-1].isdigit():  # Проверка последнего элемента на число
            if len(a) > 2:  # Если длина списка больше 2. То есть если есть элементы, которые надо повторять
                a1 = a[-2]  # Запоминаем предпоследний элемент
                a2 = a[-1]  # Запоминаем последний элемент
                del a[-1]  # Удаляем последний элемент
                del a[-1]  # Удаляем последний элемент (до прошлого удаления это был предпоследний элемент)
                l = len(a)  # Запоминаем длину исходного списка без последних двух элементов
                for i in range(int(a2) - 1):  # Цикл от 0 до кол-ва повторений - 1, потому что одно повторение уже есть
                    for j in range(l):  # Цикл от 0 до записанной длины списка
                        a.append(a[j])  # Добавление элементов
                a.append(a1)  # Добавление предпоследнего элемента
                a.append(a2)  # Добавление последнего элемента
                print(a, '- вывод')  # Вывод списка
        else:
            print(a, '- вывод')  # Вывод списка без изменений
    else:
        print(a, '- вывод')  # Вывод списка без изменений
# 4
def s0510z4():
    # Создать список из двух произвольных строк s1 и s2, их длин и результата проверки соблюдения лексикографического
    # порядка (идет ли первая строка раньше второй). В зависимости от параметра output путем обращения к элементам
    # списка выводить либо длины строк (output='lengths', в формате 'Длины строк: 4 и 5'), либо описание
    # порядка (output='order', в формате 'Строка 'первая' идет ПОСЛЕ строки 'вторая').
    print('Семинар 05.10.21\nЗадание 4 - ', end='')
    print("Создать список из двух произвольных строк s1 и s2, их длин и результата проверки соблюдения\n"
          "лексикографического порядка (идет ли первая строка раньше второй). В зависимости от параметра output путем\n"
          "обращения к элементам списка выводить либо длины строк (output='lengths', в формате 'Длины строк: 4 и 5'),\n"
          "либо описание порядка (output='order', в формате 'Строка 'первая' идет ПОСЛЕ строки 'вторая').", end='\n\n\n')

    a = []  # Список со строками, длинами и результатом проверки

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10)  # Генерация количества слов в строке
        for i in range(words):  # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)):  # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)]  # Добавляем к строке символы
            s += ' '  # После добавления полученного слова вставить пробел
        s = s[:-1]  # Удалить последний(лишний) пробел
        a.append(s)  # Сохранение полученной строки
        print(s, '- ввод')  # Вывод полеченной строки

    def CheckLeks(s1, s2):  # Функция проверки лексикографического порядка
        for i in range(min(len(s1), len(s2))):  # Цикл от 0 до минимальной длины двух строк
            if ord(s1[i]) > ord(s2[i]):  # Если символ первой строки стоит после символа второй
                return False  # False - после
            elif ord(s1[i]) < ord(s2[i]):  # Если символ первой строки стоит до символа второй
                return True  # True - до
        if len(s1) > len(s2):  # Если длина первой строки больше длины второй
            return False
        else:  # Если длина второй строки больше длины первой
            return True

    GenerateString()  # Генерация первой строки
    GenerateString()  # Генерация второй строки

    a.append(len(a[0]))  # Добавление длины первой строки
    a.append(len(a[1]))  # Добавление длины второй строки
    a.append(CheckLeks(a[0], a[1]))  # Добавление результата лексикографической проверки

    IsWhileWork = True  # Переменная для остановки цикла while
    while IsWhileWork:  # Бесконечный цикл while
        k = input()  # Получаем строку из коноли
        if k == 'lengths':  # Если введено 'ltngths'
            IsWhileWork = False  # Остановить цикл while
            print('Длины строк:', a[2], 'и', a[3])  # Вывести длины строк
        elif k == 'order':  # Если введено 'order'
            IsWhileWork = False  # Остановить цикл while
            if a[-1]:  # Если значение проверки True
                print(f"Строка '{a[0]}' идет ДО строки '{a[1]}'")  # То выводить, что первая строка стоит до второй
            else:  # Если значение False
                print(f"Строка '{a[0]}' идет ПОСЛЕ строки '{a[1]}'")  # То выводить, что первая строка стоит после второй
        else:  # Если получено что-то другое
            print('Неправильный ввод. Доступны команды: lengths, order')  # То выводить сообщение об ошибке
# 5
def s0510z5():
    # 5.1) Запросить у пользователя 2 целых числа и сохранить их в переменных max_val, repeat. Создать список из
    # целых чисел со значениями от 1 до max_val включительно повторяющийся repeat раз.
    # 5.2) На основе списка из 5.1 созданного при max_val = 10 создать его копию (значение repeat заранее
    # неизвестно). В копии с помощью среза удалить 80% элементов из середины. Все элементы исходного
    # списка, не сохранены в скопированном списке, умножить на десять.
    print('Семинар 05.10.21\nЗадание 5 - ', end='')
    print("5.1) Запросить у пользователя 2 целых числа и сохранить их в переменных max_val, repeat. Создать список из\n"
          "целых чисел со значениями от 1 до max_val включительно повторяющийся repeat раз.\n"
          "5.2) На основе списка из 5.1 созданного при max_val = 10 создать его копию (значение repeat заранее\n"
          "неизвестно). В копии с помощью среза удалить 80% элементов из середины. Все элементы исходного\n"
          "списка, не сохранены в скопированном списке, умножить на десять.", end='\n\n\n')

    m, r = int(input('max_val = ')), int(input('repeat = '))  # Получение двух целых чисел
    a = []  # Первый список (исходный в задании 5.2)

    for i in range(1, m + 1):  # Перебор чисел от 1 до max_val
        for j in range(r):  # Цикл от 0 до repeat не включительно. Для кол-ва повторений
            a.append(i)  # Добавление эл-та
    print(a, '- вывод 5.1')  # Вывод результата

    l = int(len(a) * 0.8)  # Вычислить кол-во удаляемых элементов
    s1 = len(a) // 2 - l // 2  # Индекс, с которого удалять элементы
    s2 = len(a) // 2 + l // 2  # Индекс, до которого удалять элементы

    b = a[:s1] + a[s2:]  # Удалить эл-ты из исходного списка срезами и записать в список b
    for i in range(s1, s2):  # Цикл от началального до конечного элементов
        a[i] = 10 * a[i]  # Умножение удаленных элементов на 10

    print(a, '- вывод 5.2')  # Вывод результата
    print(b, '- вывод 5.2')
# 6
def s0510z6():
    # Из произвольной строки создать список. Вместо каждой буквы 's' (без учета регистра), стоящей не на
    # первом и не на последнем месте, вставить в список строку из двойного предыдущего символа и одного
    # следующего. Например, из строки 'test_Stringss' должен получиться
    # список ['t', 'e', 'eet', 't', '_', '__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's'].
    print('Семинар 05.10.21\nЗадание 6 - ', end='')
    print("Из произвольной строки создать список. Вместо каждой буквы 's' (без учета регистра), стоящей не на\n"
          "первом и не на последнем месте, вставить в список строку из двойного предыдущего символа и одного\n"
          "следующего. Например, из строки 'test_Stringss' должен получиться\n"
          "список ['t', 'e', 'eet', 't', '_', '__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's'].", end='\n\n\n')

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 3)  # Генерация количества слов в строке
        for i in range(words):  # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)):  # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)]  # Добавляем к строке символы
            s += '_'  # После добавления полученного слова вставить пробел
        s = s[:-1]  # Удалить последний(лишний) пробел
        print(s, '- ввод')  # Вывод полеченной строки
        CheckString(s)  # Вызов метода проверки полученной строки. Передаем функции в аргумент полученную строку

    def CheckString(s):  # Метод проверки строки
        if len(s) == 0:  # Если строка пустая
            print('Строка пустая. Генерация новой строки...')  # То выводить сообщение
            GenerateString()  # И генерировать новую строку
        else:  # Если строка не пустая
            a = list(s)  # Превратить строку в список
            for i in range(1, len(a) - 1):  # Цикл от 1 до предпоследнего символа
                if a[i] == 's':  # Если встретился символ 's'
                    a[i] = a[i - 1] * 2 + a[i + 1]  # То менять его на два предыдущих и один следующий
            print(a, '- вывод')  # Вывод полученного списка

    GenerateString()  # Создаем новую строку с помощью функции генерации строк
# 7
def s0510z7():
    # Организовать заполнение списка заданной длины пользователем через input(). Если на вход подается число
    # (целое или через точку), то записывать в список целое число с округлением вверх. Если 'True' или
    # 'False', то как boolean. Иначе - как строку.
    print('Семинар 05.10.21\nЗадание 7 - ', end='')
    print("Организовать заполнение списка заданной длины пользователем через input(). Если на вход подается число\n"
          "(целое или через точку), то записывать в список целое число с округлением вверх. Если 'True' или\n"
          "'False', то как boolean. Иначе - как строку.", end='\n\n\n')

    l = int(input('Кол-во элементов: '))  # Получение длины списка
    a = []  # Список для заполнения

    for i in range(l):  # Цикл от 0 до длины списка не включительно
        k = input('Элемент: ')  # Получение элемента
        try:
            r = int(k)  # Пробуем преобразовать его в целое число
            a.append(r)  # Если получилось, то записать как int
        except:  # Если нет
            try:
                f = float(k)  # То пытаемся преобразовать его в дробь
                a.append(int(f + 1))  # Если получилось, то записать как int с округлением
            except:  # Если нет
                if k == 'True':  # Если это 'True'
                    a.append(True)  # То записать как bool
                elif k == 'False':  # Если это 'False'
                    a.append(False)  # То записать как bool
                else:  # Если это другая строка
                    a.append(k)  # То записать как string

    print(a, '- вывод')  # Вывод результата
# 8
def s0510z8():
    # Заданы две заранее неизвестные строки в которых слова разделены пробелами. Из двух строк составить одну, в
    # котрой слова из первой и второй строки будут чередоваться при этом порядок слов будет сохранен.
    # Для преобразований использовать списки слов.
    print('Семинар 05.10.21\nЗадание 8 - ', end='')
    print("Заданы две заранее неизвестные строки в которых слова разделены пробелами. Из двух строк составить одну, в\n"
          "котрой слова из первой и второй строки будут чередоваться при этом порядок слов будет сохранен.\n"
          "Для преобразований использовать списки слов.", end='\n\n\n')

    a = []  # Список со строками, длинами и результатом проверки

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10)  # Генерация количества слов в строке
        for i in range(words):  # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)):  # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)]  # Добавляем к строке символы
            s += ' '  # После добавления полученного слова вставить пробел
        s = s[:-1]  # Удалить последний(лишний) пробел
        a.append(s)  # Сохранение полученной строки
        print(s, '- ввод')  # Вывод полеченной строки

    GenerateString()  # Генерация первой строки
    GenerateString()  # Генерация второй строки

    if len(a[0]) == 0:  # Если первая строка пустая
        if len(a[1]) == 0:  # И вторая строка пустая
            print('Строки пустые')  # То выводить сообщение
        else:  # Если вторая строка не пустая
            print(a[1])  # То выводить вторую строку
    elif len(a[1]) == 0:  # Если вторая строка пустая, а первая нет
        print(a[0])  # То выводить первую строку
    else:  # Если строки не пустые
        s1 = a[0].split()  # Разбиваем первую строку на список
        s2 = a[1].split()  # Разбиваем вторую строку на список
        l = min(len(s1), len(s2))  # Вычисляем длину наименьшего списка (наименьшего ко-ва слов)
        b = ''  # Строка результата

        for i in range(l):  # Цикл от 0 до длины наименьшего списка
            b += s1[i] + ' ' + s2[i] + ' '  # Добавляем слово из первой строки и слово из второй строки через пробел
        if len(s1) > len(s2):  # Если длина первой строки больше второй
            for i in range(l, len(s1)):  # То циклом добавляем оставшиеся слова
                b += s1[i] + ' '
        elif len(s1) < len(s2):  # Если длина второй строки больше первой
            for i in range(l, len(s2)):  # То циклом добавляем оставшиеся слова
                b += s2[i] + ' '
        b = b[:-1]  # Удаляем последний (лишний) пробел

        print(b, '- вывод')  # Вывод результата
# 9
def s0510z9():
    # Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же
    # копий всех элементов, не считая последних двух (последние два просто добавить). Например, список
    # ['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].
    print('Семинар 05.10.21\nЗадание 9 - ', end='')
    print("Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же\n"
          "копий всех элементов, не считая последних двух (последние два просто добавить). Например, список\n"
          "['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].", end='\n\n\n')

    a = []  # Список со строками, длинами и результатом проверки

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10)  # Генерация количества слов в строке
        for i in range(words):  # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)):  # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)]  # Добавляем к строке символы
            s += ' '  # После добавления полученного слова вставить пробел
        s = s[:-1]  # Удалить последний(лишний) пробел
        a.append(s)  # Сохранение полученной строки
        print(s, '- ввод')  # Вывод полеченной строки

    GenerateString()  # Генерация первой строки
    GenerateString()  # Генерация второй строки

    if len(a[0]) == 0:  # Если первая строка пустая
        if len(a[1]) == 0:  # И вторая строка пустая
            print('Строки пустые')  # То выводить сообщение
        else:  # Если вторая строка не пустая
            print(a[1])  # То выводить вторую строку
    elif len(a[1]) == 0:  # Если вторая строка пустая, а первая нет
        print(a[0])  # То выводить первую строку
    else:  # Если строки не пустые
        s1 = a[0].split()  # Разбиваем первую строку на список
        s2 = a[1].split()  # Разбиваем вторую строку на список
        l = min(len(s1), len(s2))  # Вычисляем длину наименьшего списка (наименьшего ко-ва слов)

        c = list(zip(s1, s2))  # Объединение слов из двух списков до конца самого короткого списка
        b = ''  # Строка результата
        for i in range(len(c)):  # Цикл от 0 до длины объединения
            t = str(c[i])  # Получаем строку
            t = t[1:-1].replace("'", '')  # Убираем скобки и кавычки
            t = t.replace(',', '')  # Убираем запятые
            b += t + ' '  # Добавляем в строку результата наши слова и пробел в конце для следующих слов

        if len(s1) > len(s2):  # Если длина первой строки больше второй
            for i in range(l, len(s1)):  # То циклом добавляем оставшиеся слова
                b += s1[i] + ' '
        elif len(s1) < len(s2):  # Если длина второй строки больше первой
            for i in range(l, len(s2)):  # То циклом добавляем оставшиеся слова
                b += s2[i] + ' '
        b = b[:-1]  # Удаляем последний (лишний) пробел

        print(b, '- вывод')  # Вывод результата
# 10
def s0510z10():
    # Выполнить циклический сдвиг слов в произвольной строке (слова разделены пробелами) на заднное пользователем
    # число слов. Решить с помощью списков слов
    print('Семинар 05.10.21\nЗадание 10 - ', end='')
    print("Выполнить циклический сдвиг слов в произвольной строке (слова разделены пробелами) на заднное пользователем\n"
          "число слов. Решить с помощью списков слов", end='\n\n\n')

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        words = random.randint(0, 10)  # Генерация количества слов в строке
        for i in range(words):  # Цикл от 0 до количества слов
            for j in range(random.randint(1, 20)):  # Цикл для генерации слов длины от 1 до 20
                s += letters[random.randint(0, len(letters) - 1)]  # Добавляем к строке символы
            s += ' '  # После добавления полученного слова вставить пробел
        s = s[:-1]  # Удалить последний(лишний) пробел
        print(s, '- ввод')  # Вывод полеченной строки
        MoveWords(s)  # Вызов метода проверки полученной строки. Передаем функции в аргумент полученную строку

    def MoveWords(s):  # Метод сдвига слов
        if len(s) == 0:  # Если строка пустая
            print('Строка пустая. Генерируем новую строку...')  # То выводить сообщение
            GenerateString()  # Генерировать новую строку
        else:  # Если строка не пустая
            a = s.split()  # Записываем ее в список
            k = int(input('Сдвиг: '))  # Получаем от пользователя сдвиг
            for i in range(k):  # Цикл от 0 до сдвига не включительно
                b = a[0]  # Запоминаем первый элемент
                del a[0]  # Удаляем первый элемент в списке
                a.append(b)  # Добавляем в конец записанный первый элемент
            print(*a, '- вывод')  # Вывод результата

    GenerateString()  # Генерация строки
# 11
def s0510z11():
    # В списке целых чисел из диапозона от 1 до 20 заменить все числа не являющиеся простыми на составляющие их
    # простые множители (которые включаются в виде отдельных элементов списка на место исключаемого числа).
    # Каратные простые множетели добавлять количество раз составляющее их кратность в исходном числе.
    print('Семинар 05.10.21\nЗадание 11 - ', end='')
    print("Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же\n"
          "копий всех элементов, не считая последних двух (последние два просто добавить). Например, список\n"
          "['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].", end='\n\n\n')

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        l = random.randint(0, 20)  # Длина списка
        while len(s) != l:  # Пока длина списка меньше нужного
            a = random.randint(1, 20)  # Случайное число
            if not (a in s):  # Если такого числа нет в полученном списке
                s.append(a)  # Добавить его в список
        print(s, '- ввод')  # Вывод полеченного списка
        ReplaceList(s)  # Вызов метода проверки полученного списка. Передаем функции в аргумент полученный список

    def ReplaceList(s):  # Метод замены не простых чисел в списке
        if len(s) == 0:  # Если список пустой
            print('Список пуст. Генерируем новый список...')  # То выводить сообщение
            GenerateList()  # Генерировать новый список
        else:  # Если список не пустой
            a = [4, 6, 8, 10, 12, 14, 15, 16, 18, 20]  # Список не простых чисел от 1 до 20
            b = ['2 2', '2 3', '2 2 2', '2 5', '2 2 3', '2 7', '3 5', '2 2 2 2', '2 9',
                 '2 2 5']  # На что заменять эти числа
            st = 0  # Индекс текущего числа
            m = len(s)  # Длина строки
            while st < m:  # Пока индекс текущего числа меньше длины строки
                if s[st] in a:  # Если нашлось не простое число
                    s = s[:st] + list(map(int, b[a.index(s[st])].split())) + s[st + 1:]  # Заменить его на простые срезами
                    m = len(s)  # Записать новую длину списка
                st += 1  # Перейти к следующему элементу
            print(s, '- вывод')  # Вывод результата

    GenerateList()  # Генерация списка
# 14 | сделан не на семинаре
def s0510z14():
    # Найти индекс второго с конца вхождения значения 1 в список из целых чисел
    print('Семинар 05.10.21\nЗадание 14 - ', end='')
    print("Найти индекс второго с конца вхождения значения 1 в список из целых чисел", end='\n\n\n')

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        l = random.randint(0, 20)  # Длина списка
        while len(s) != l:  # Пока длина списка меньше нужного
            a = random.randint(1, 5)  # Случайное число
            s.append(a)  # Добавить его в список
        print(s, '- ввод')  # Вывод полеченного списка
        FindSecond1InList(s)  # Вызов метода проверки полученного списка. Передаем функции в аргумент полученный список

    def FindSecond1InList(s):
        a = [i for i, x in enumerate(s) if x == 1]
        if len(a) < 2:
            print('В списке недостаточно единиц. Генерируем новый список...\n')
            GenerateList()
        else:
            print(a[-2], '- вывод')

    GenerateList()

# Семинар 12.10.21 (с семинара 05.10.12)
# 12
def s1210z12():
    # В списке, состоящем из чисел найти значение меньше или равно которому только одно значения из списка.
    print('Семинар 12.10.21\nЗадание 12 - ', end='')
    print("В списке, состоящем из чисел найти значение меньше или равно которому только одно значения из списка.", end='\n\n\n')

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        l = random.randint(0, 50)  # Длина списка
        for i in range(l):  # Цикл от 0 до длины списка
            s.append(random.randint(1, 20))  # Добавляем случайное число в список
        print(s, '- ввод')  # Вывод полученного списка
        FindMin(s)  # Вызвать метод поиска минимального элемента

    def FindMin(s):  # Метод поиска минимального элемента в списке
        print(sorted(s), '- отсортированный список')  # Выводим отсортированный список для удобства
        print(min(s), '- вывод (минимальный элемент)')  # Выводим минимальный элемент
        while len(
                s) > 0:  # Пока длина списка больше 0 (если не нашлось не повторяющегося минимального элемента, то программа ничего не выведет)
            a = min(s)  # Находим минимальный элемент
            if s.count(a) > 1:  # Если минимальных элементов больше 1
                while a in s:  # Удаляем все минимальные элементы пока они встречаются в списке
                    del s[s.index(a)]
            else:  # Если минимальный элемент один
                print(min(s), '- вывод (минимальный элемент, который не повторяется)')  # Выводим его
                s = []  # Очищаем список, чтобы остановить цикл while

    GenerateList()  # Запускаем генерацию списка
# 13
def s1210z13():
    # Найти индекс в списке для значения, найденного в задаче 12.
    print('Семинар 12.10.21\nЗадание 13 - ', end='')
    print("Найти индекс в списке для значения, найденного в задаче 12.", end='\n\n\n')

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        l = random.randint(0, 20)  # Длина списка
        for i in range(l):  # Цикл от 0 до длины списка
            s.append(random.randint(1, 10))  # Добавляем случайное число в список
        print(s, '- ввод')  # Вывод полученного списка
        FindMin(s)  # Вызвать метод поиска минимального элемента

    def FindMin(s):  # Метод поиска минимального элемента в списке
        if len(s) == 0:  # Если список пуст
            print('Список пуст. Генерация нового списка...\n')  # Выводим сообщение об этом
            GenerateList()  # Генерируем новый список
        else:
            print(sorted(s), '- отсортированный список')  # Выводим отсортированный список для удобства
            print(s.index(min(s)), '- вывод (индекс минимального элемента)')  # Выводим индекс минимального элемента
            while len(
                    s) > 0:  # Пока длина списка больше 0 (если не нашлось не повторяющегося минимального элемента, то программа выведет соотв. сообщение)
                a = min(s)  # Находим минимальный элемент
                if min(s) == 1000:  # Если заменились все эмеленты, то этот элемент единственный
                    print('Этот элемент является единственным')  # Выводим об этом сообщение
                    s = []  # Очищаем список, чтобы остановить цикл while
                else:  # Если минимальный элемент не 1000
                    if s.count(a) > 1:  # Если минимальных элементов больше 1
                        while a in s:  # Заменяем все минимальные элементы пока они встречаются в списке
                            s[s.index(a)] = 1000
                    else:  # Если минимальный элемент один
                        print(s.index(min(s)),
                              '- вывод (индекс минимального элемента, который не повторяется)')  # Выводим индекс минимального элемента, который не повторяется
                        s = []  # Очищаем список, чтобы остановить цикл while

    GenerateList()  # Запускаем генерацию списка
# 15
def s1210z15():
    # Реализовать функцию умножения двух матриц, записанных как список списков.
    # Проверить на умножении матрицы на единичную матрицу
    print('Семинар 12.10.21\nЗадание 15 - ', end='')
    print("Реализовать функцию умножения двух матриц, записанных как список списков.\n"
          "Проверить на умножении матрицы на единичную матрицу", end='\n\n\n')

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        strok = random.randint(0, 10)  # Генерация кол-ва строк в матрице
        stolb = random.randint(0, 10)  # Генерация кол-ва столбцов в матрице
        for i in range(strok):  # Цикл для кол-ва строк
            a = []  # Промежуточный список (строка)
            for j in range(stolb):  # Цикл для ко-ва столбцов
                a.append(random.randint(0, 5))  # Добавление в строку эл-ов (их кол-во равно кол-ву столбцов)
            s.append(a)  # Сохраняем полученную строку
        print(s, '- ввод')
        return s  # Возвращаем полученную матрицу

    def MultipleLists():  # Метод замены не простых чисел в списке
        m1 = GenerateList()  # Генерация списка
        m2 = GenerateList()  # Генерация списка
        s1 = str(m1).replace('[', '').replace(']', '').replace(' ', '').replace(',', '')  # Превращаем матрицы в строки для проверок
        s2 = str(m2).replace('[', '').replace(']', '').replace(' ', '').replace(',', '')
        if m1 == [] or m2 == []:  # Если хотя-бы одна из матриц пустая
            print('Матрицы пустые. Генерация новых матриц...\n')  # Выводим сообщение
            MultipleLists()  # Заново запускаем программу
        elif s1 == '' or s2 == '':  # Если в матрице только пустые эл-ты
            print('Матрица(ы) пустая(ые). Генерация новых матриц...\n')  # Выводим сообщение
            MultipleLists()  # Заново запускаем программу
        else:
            if len(m1[0]) == len(m2):  # Проверка условия для перемножения матриц (число столбцов первой матрицы равно числу строк второй матрицы)
                r = []  # Результат
                m3 = []  # Промежуточная матрица (по столбцам)
                for i in range(len(m2[0])):  # Цикл по кол-ву эл-ов в строке матрицы
                    m3.append([])  # Добавляем новый столбец в промежуточную матрицу
                    for j in range(len(m2)):  # Цикл по столбцам матрицы
                        m3[-1].append(m2[j][i])  # Добавляем в текущий столбец промежуточной матрицы элементы по столбцам
                for i in range(len(m1)):  # Цикл по строкам первой матрицы
                    k1 = m1[i]  # Текущая строка первой матрицы
                    r.append([])  # Добавляем в результат строку
                    for j in range(len(m3)):  # Цикл по столцам в промежуточной матрице
                        s = 0  # Сумма умножений элементов матрицы
                        for o in range(len(k1)):  # Цикл по эл-ам текущей строки первой матрицы
                            s += k1[o] * m3[j][
                                o]  # Добавляем к сумме умножений произведение эл-ов матриц (строка(по эл-ам) * столбец(соотв. по эл-ам))
                        r[-1].append(s)  # Записываем полученную сумму умножений
                print(r, '- вывод')  # Выводим результат
            else:
                print('Матрицы невозможно перемножить. Генерируем новые матрицы')  # Выводим сообщение, если невозможно перемножить матрицы
                MultipleLists()

    MultipleLists()
# 16
def s1210z16():
    # Создать копию матрицы, записанной в виде вложенных списков, так что при изменении элементов исходной матрицы,
    # скопированная матрица меняться не будет
    print('Семинар 12.10.21\nЗадание 16 - ', end='')
    print("Создать копию матрицы, записанной в виде вложенных списков, так что при изменении элементов исходной матрицы,\n"
          "скопированная матрица меняться не будет", end='\n\n\n')

    k = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]  # Исходная матрица
    print(k, '- исходная матрица')
    s = k  # Копируем матрицу
    k = [[1, 2, 3]]  # Изменяем исходную матрицу
    print(k, '- измененная матрица')
    print(s, '- скопированная матрица')
# 17
def s1210z17():
    # Осортировать слова в строке (с пробелом в качестве разделителя) в лексикографическом порядке.
    print('Семинар 12.10.21\nЗадание 17 - ', end='')
    print("Осортировать слова в строке (с пробелом в качестве разделителя) в лексикографическом порядке.", end='\n\n\n')

    def IsFirstBeforeSecond(s1, s2):  # Функция для проверки, стоит ли первое слово раньше в лексикографическом порядке
        FirstBeforeSecond = True  # Стоит ли слово раньше в лексикографическом порядке
        for i in range(min(len(s1), len(s2))):  # Цикл от 0 до длины минимального слова
            if ord(s1[i]) < ord(s2[i]):  # Если символ в первом слове стоит раньше символа второго
                break  # То все слово стоит раньше. Останавливаем, потому что слово уже стоит раньше
            elif ord(s1[i]) > ord(s2[i]):  # Если позже
                FirstBeforeSecond = False  # Записываем это
                break  # Останавливаем цикл, потому что слово уже стоит позже
        return FirstBeforeSecond  # Возвращаем результат проверки

    s = input('Ввод: ')  # Получение строки
    if s == '':  # Если строка пустая, то выводим сообщение
        print('Строка пустая')
    elif len(s.split()) == 0:  # Если строка состоит только из пробелов, выводим сообщение
        print('Строка состоит из пробелов')
    else:  # Если строка не пустая
        s = s.split()  # Разбиваем строку на список
        i = 1  # Индекс второго слова
        while i < len(s):  # Пока индекс второго слова входит в список
            if IsFirstBeforeSecond(s[i - 1], s[i]):  # Если первое слово стоит раньше второго
                i += 1  # Идем к следующему слову
            else:  # Если нет
                a = s[i]  # Меняем слова местами
                s[i] = s[i - 1]
                s[i - 1] = a
                i = 1  # Ставим индекс в начало, чтобы заново все проверить
        print(*s, '- вывод')  # Выводим результат
# 18
def s1210z18():
    # Имеется переменная lsls содержащая список списков. Заранее неизвестно, сколько в переменной списков и какой
    # они длины (их длины в общем случае различны). Из этих списков составить список, содержащий поорчедно элементы
    # каждого из вложенных списков, при этом, порядок этих элементов сохраняется. Процедура создания списка
    # останавливается когда хотя бы в одном из исходных вложенных списков будут использованные все элементы. Кроме
    # составленного списка получить список из всех элементов не вошедших в составленный список.
    print('Семинар 12.10.21\nЗадание 18 - ', end='')
    print("Имеется переменная lsls содержащая список списков. Заранее неизвестно, сколько в переменной списков и какой\n"
          "они длины (их длины в общем случае различны). Из этих списков составить список, содержащий поорчедно элементы\n"
          "каждого из вложенных списков, при этом, порядок этих элементов сохраняется. Процедура создания списка\n"
          "останавливается когда хотя бы в одном из исходных вложенных списков будут использованные все элементы. Кроме\n"
          "составленного списка получить список из всех элементов не вошедших в составленный список.", end='\n\n\n')

    a = [[1, 2, 3], ['a', 'b'], [30, 40, 50, 60]]  # Список списков
    print(a, '- ввод')
    l = []  # Длины вложенных списков
    r = []  # Результат
    for i in a:  # Находим длины вложенных списков
        l.append(len(i))  # Записываем их в список
    for i in range(min(l)):  # Цикл от 0 до минимальной длины вложенного списка
        k = []  # Промежуточный список
        for j in range(len(a)):  # Цикл от 0 до длины исходного списка
            k.append(a[j][0])  # Добавляем первый элемент из каждого вложенного списка в промежуточный список
            del a[j][0]  # Удаляем первые элементы
        r.append(k)  # Записываем полученный список в список результатов
    while [] in a:  # Удаляем пустые списки
        del a[a.index([])]
    z = []  # Промежуточный списо для оставшихся элементов
    for i in range(len(a)):  # Цикл от 0 до длины оставшихся элементов
        for k in range(len(a[i])):  # Цикл от 0 до длины текущего вложенного списка
            z.append(a[i][k])  # Добавляем в промежуточный список оставшиеся элементы
    r.append(z)  # Добавляем в список результатов полученный промежуточный список
    print(r, '- вывод')  # Вывод результата

# Семинар 19.10.21
# 1
def s1910z1():
    # На основе переданной строки (не содержащей повторяющихся символов) создать словарь, в котром каждому символу
    # строки будет соответствовать номер символа в строке.
    print('Семинар 19.10.21\nЗадание 1 - ', end='')
    print("На основе переданной строки (не содержащей повторяющихся символов) создать словарь, в котром каждому символу\n"
          "строки будет соответствовать номер символа в строке.", end='\n\n\n')

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        l = random.randint(0, 26)  # Кол-во букв в слове
        for i in range(l):  # Цикл от 0 до количества букв в слове
            a = random.randint(0, len(letters) - 1)  # Выбираем индекс символа
            s += letters[a]  # Добавляем к строке символ
            letters = letters[:a] + letters[a + 1:]  # Удаляем этот символ из алфавита, чтобы символы не повторялись
        print(s, '- ввод')  # Вывод полученной строки
        NumberChar(s)  # Запуск метода нумерации символов

    def NumberChar(s):  # Метод нумерации символов
        r = {}  # Создаем словарь
        for i in range(len(s)):  # Цикл по всем символам полученной строки (от 0 до длины строки)
            r[s[i]] = i + 1  # Добавляем значение в словарь (key = буква, значение = номер символа в строке)
        print(r, '- вывод')  # Вывод полученного словаря

    GenerateString()  # Запуск метода генерации строки
# 2
def s1910z2():
    # Определить сколько элементов заданного списка содержится в словаре. Пример: определить сколько элементов
    # списка l1 содержится в словаре d1 (ответ: 2)
    print('Семинар 19.10.21\nЗадание 2 - ', end='')
    print("Определить сколько элементов заданного списка содержится в словаре. Пример: определить сколько элементов\n"
          "списка l1 содержится в словаре d1 (ответ: 2).", end='\n\n\n')

    r = {}  # Создаем словарь

    def GenerateString():  # Метод генерации строки
        s = ''  # Произвольная строка
        letters = string.ascii_lowercase  # Все буквы английского алфавита для генерации строк
        l = random.randint(0, 26)  # Кол-во букв в слове
        for i in range(l):  # Цикл от 0 до количества букв в слове
            a = random.randint(0, len(letters) - 1)  # Выбираем индекс символа
            s += letters[a]  # Добавляем к строке символ
            letters = letters[:a] + letters[a + 1:]  # Удаляем этот символ из алфавита, чтобы символы не повторялись
        print(s, '- ввод')  # Вывод полученной строки
        NumberChar(s)  # Запуск метода нумерации символов

    def GenerateList():  # Метод генерации списка
        s = []  # Произвольный список
        letters = string.ascii_lowercase
        l = random.randint(0, 20)  # Длина списка
        for i in range(l):  # Цикл от 0 до длины списка
            s.append(letters[random.randint(0, len(letters) - 1)])  # Добавляем случайное число в список
        print(s, '- ввод')  # Вывод полученного списка
        CountElements(s)

    def NumberChar(s):  # Метод нумерации символов
        for i in range(len(s)):  # Цикл по всем символам полученной строки (от 0 до длины строки)
            r[s[i]] = i + 1  # Добавляем значение в словарь (key = буква, значение = номер символа в строке)
        print(r, '- словарь')  # Вывод полученного словаря
        GenerateList()  # Запуск метода получения кол-ва элементов списка в словаре

    def CountElements(s):  # Метод получения кол-ва элементов списка в словаре
        c = 0  # Кол-во элементов списка в словаре
        for i in s:  # Цикл по элементам в списка
            if r.get(i):  # Если есть такой символ в словаре
                c += 1  # То записываем это
        print(c, '- вывод')  # Вывод ко-ва элементов списка в словаре

    GenerateString()  # Запуск метода генерации строки
# 3
def s1910z3():
    # Для строки evgene_o создать словарь где для всех символов, встречающихся в строке хранится число: сколько
    # раз символ встретился в строке evgene_o.
    print('Семинар 19.10.21\nЗадание 3 - ', end='')
    print("Для строки evgene_o создать словарь где для всех символов, встречающихся в строке хранится число: сколько\n"
          "раз символ встретился в строке evgene_o.", end='\n\n\n')

    s = 'evgene_o'  # Исходная строка
    print(s, '- ввод')  # Вывод этой строки
    d = {}  # Словарь
    for i in s:  # Цикл по элементам строки
        d[i] = s.count(i)  # Добавляем в словарь значение (key = текущий символ, значение = кол-во этих символов)
    print(d, '- вывод')  # Вывод полученного словаря
# 4
def s1910z4():
    # Используя словарь, полученный в задаче 3 подсчитать количество строчных букв в строке evgene_o.
    print('Семинар 19.10.21\nЗадание 4 - ', end='')
    print("Используя словарь, полученный в задаче 3 подсчитать количество строчных букв в строке evgene_o.", end='\n\n\n')

    s = 'evgene_o'  # Исходная строка
    print(s, '- ввод')  # Вывод этой строки
    d = {}  # Словарь
    for i in s:  # Цикл по элементам строки
        d[i] = s.count(i)  # Добавляем в словарь значение (key = текущий символ, значение = кол-во этих символов)

    l = list(d.keys())  # Список с ключами в словаре
    r = 0  # Кол-во строчных букв в исходной строке
    for i in l:  # Цикл по ключам словаря
        if i.islower():  # Если ключ - это строчная буква
            r += d[i]  # То добавляю кол-во этих букв из словаря

    print(r, '- вывод')  # Вывод кол-ва строчных букв
# 5
def s1910z5():
    # Написать код, который создает новый словарь с именем dic4, содержащий все пары ключ-значение
    # из словарей dic1, dic2, dic3.
    print('Семинар 19.10.21\nЗадание 5 - ', end='')
    print("Написать код, который создает новый словарь с именем dic4, содержащий все пары ключ-значение\n"
          "из словарей dic1, dic2, dic3.", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 5)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0,
                                                                             100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic1 = GenerateDictionary()  # Создаем три словаря
    dic2 = GenerateDictionary()
    dic3 = GenerateDictionary()
    print(dic1, '- ввод')  # Вывод полученных словарей
    print(dic2, '- ввод')
    print(dic3, '- ввод')

    dic4 = dict(list(dic1.items()) + list(dic2.items()) + list(dic3.items()))  # Создаем общий словарь
    print(dic4, '- вывод')  # Вывод результата
# 6
def s1910z6():
    # Просуммировать все значения из словаря dic4
    print('Семинар 19.10.21\nЗадание 6 - ', end='')
    print("Просуммировать все значения из словаря dic4", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 5)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0, 100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic1 = GenerateDictionary()  # Создаем три словаря
    dic2 = GenerateDictionary()
    dic3 = GenerateDictionary()
    print(dic1, '- ввод')  # Вывод полученных словарей
    print(dic2, '- ввод')
    print(dic3, '- ввод')

    dic4 = dict(list(dic1.items()) + list(dic2.items()) + list(dic3.items()))  # Создаем общий словарь
    print(dic4, '- полученный словарь')  # Вывод полученного словаря
    a = list(dic4.values())  # Получаем значения из полученного словаря
    r = sum(a)  # Записываем сумму значений
    print(r, '- вывод')  # Вывод результата
# 7
def s1910z7():
    # Перемножить все значения из словаря dic4
    print('Семинар 19.10.21\nЗадание 7 - ', end='')
    print("Перемножить все значения из словаря dic4", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 5)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0, 100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic1 = GenerateDictionary()  # Создаем три словаря
    dic2 = GenerateDictionary()
    dic3 = GenerateDictionary()
    print(dic1, '- ввод')  # Вывод полученных словарей
    print(dic2, '- ввод')
    print(dic3, '- ввод')

    dic4 = dict(list(dic1.items()) + list(dic2.items()) + list(dic3.items()))  # Создаем общий словарь
    print(dic4, '- полученный словарь')  # Вывод полученного словаря
    a = list(dic4.values())  # Получаем значения из полученного словаря
    r = 1  # Результат перемножения значений словаря
    for i in a:  # Цикл по значениям словаря
        r *= i  # Перемножаем старые элементы на новый
    print(r, '- вывод')  # Вывод результата
# 8
def s1910z8():
    # Просуммировать произведения ключей на словаря dic4 на соответствующие им значения
    print('Семинар 19.10.21\nЗадание 8 - ', end='')
    print("Просуммировать произведения ключей на словаря dic4 на соответствующие им значения", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 5)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0, 100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic1 = GenerateDictionary()  # Создаем три словаря
    dic2 = GenerateDictionary()
    dic3 = GenerateDictionary()
    print(dic1, '- ввод')  # Вывод полученных словарей
    print(dic2, '- ввод')
    print(dic3, '- ввод')

    dic4 = dict(list(dic1.items()) + list(dic2.items()) + list(dic3.items()))  # Создаем общий словарь
    print(dic4, '- полученный словарь')  # Вывод полученного словаря
    a = list(dic4.keys())  # Получаем ключи из полученного словаря
    b = list(dic4.values())  # Получаем значения из полученного словаря
    r = ''  # Результат
    for i in range(len(a)):  # Цикл от 0 до кол-ва ключей в словаре
        r += a[i] * b[i]  # Добавляем к результату ключи умноженные на соотв. значения
    print(r, '- вывод')  # Вывод результата
# 9
def s1910z9():
    # На базе словаря dic6 создать словарь dic7 в котором нет пар ключ-значение с ключами, встречающимися в словаре dic5
    print('Семинар 19.10.21\nЗадание 9 - ', end='')
    print("На базе словаря dic6 создать словарь dic7 в котором нет пар ключ-значение с ключами, встречающимися в словаре dic5", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 20)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0, 100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic5 = GenerateDictionary()  # Создаем два словаря
    dic6 = GenerateDictionary()
    print(dic5, '- ввод')  # Вывод полученных словарей
    print(dic6, '- ввод')

    dic7 = {}  # Результат
    a = list(dic5.keys())  # Получаем ключи из словаря dic5
    b = list(dic6.keys())  # Получаем ключи из словаря dic6
    c = list(dic6.values())  # Получаем значения из словаря dic6
    for i in range(len(b)):  # Цикл от 0 до кол-ва ключей в словаре dic6
        if b[i] not in a:  # Если текущего ключа в словаре dic6 нет в словаре dic5
            dic7[b[i]] = c[i]  # То добавляем в словарь dic7 ключ и значение из словаря dic6
    print(dic7, '- вывод')  # Вывод результата
# 10
def s1910z10():
    # Создать словарь dic8 в котором есть все пары ключ-значения из dic5, а для ключей, которые есть в dic6,
    # но отсутствуют в dic5 добавить соответствующие пары ключ-значения в dic8.
    print('Семинар 19.10.21\nЗадание 10 - ', end='')
    print("Создать словарь dic8 в котором есть все пары ключ-значения из dic5, а для ключей, которые есть в dic6,\n"
          "но отсутствуют в dic5 добавить соответствующие пары ключ-значения в dic8.", end='\n\n\n')

    def GenerateDictionary():  # Функция генерации словаря
        d = {}  # Словарь
        letters = string.ascii_lowercase  # Строчные буквы английского алфавита
        l = random.randint(0, 20)  # Длина словаря
        for i in range(l):  # Цикл от 0 до длины словаря
            d[letters[random.randint(0, len(letters) - 1)]] = random.randint(0, 100)  # Добавляем в словарь случайный символ и случайное значение к нему
        return d  # Возвращаем словарь

    dic5 = GenerateDictionary()  # Создаем два словаря
    dic6 = GenerateDictionary()
    print(dic5, '- ввод')  # Вывод полученных словарей
    print(dic6, '- ввод')

    dic8 = dic5  # Результат
    a = list(dic5.keys())  # Получаем ключи словаря dic5
    b = list(dic6.keys())  # Получаем ключи словаря dic6
    c = list(dic6.values())  # Получаем значения словаря dic6
    for i in range(len(b)):  # Цикл от 0 до кол-ва ключей в словаре dic6
        if b[i] not in a:  # Если такого ключа нет в словаре dic5
            dic8[b[i]] = c[i]  # То добавляем в результат ключ-значение
    print(dic8, '- вывод')  # Вывод результата

# Меню словарями
# d = {'1': 's1910z1', '2': 's1910z2', '3': 's1910z3', '4': 's1910z4', '5': 's1910z5', '6': 's1910z6',
#      '7': 's1910z7', '8': 's1910z8', '9': 's1910z9', '10': 's1910z10'}
# f = globals()[d[input('Введите номер задания: ')]]
# f()
# print()

# Menu
def Menu():
    dates = []  # Даты найденных семинаров
    for i in range(1, 13):  # Цикл от 1 до 12 для месяцев
        for j in range(1, 32):  # Цикл от 1 до 31 для дней
            a = '0' * (2 - len(str(j))) + str(j) + '0' * (2 - len(str(i))) + str(i)  # Составление даты с нулями или без
            for k in range(100):  # Цикл от 0 до 100 для заданий
                try:
                    globals()['s' + a + 'z' + str(k)]  # Если есть функция с такой датой и таким заданием
                    dates.append(a)  # Добавить этот семинар
                    break  # Остановить цикл с заданиями. Если найдено хотя-бы одно задание, то такой семинар есть
                except:  # Если не найдено, идти дальше по заданиям
                    pass
    print('Семинары: ', end='')  # Вывод семинаров
    print(*dates, sep=', ')

    date = ''  # Переменная для полученной от пользователя даты
    IsWhileWork = True  # Работает ли сейчас while
    IsDateCorrect = True  # Правильная ли введенная пользователем дата (реверсивная)
    IsSeminarCorrect = False  # Найден ли семинар на введенную пользователем дату
    while IsWhileWork:  # Цикл while пока переменная равна True
        if IsDateCorrect:  # Если не получена корректная дата (реверсивная переменная, значит True - не найдена)
            date = input('Дата семинара (пример: "1409" - 14 сентября): ')  # Получение даты от пользователя с соотв. текстом
            s = []  # Список для найденных заданий по введенной дате
            for i in range(100):  # Цикл от 0 до 100 для поиска заданий
                try:
                    globals()['s' + date + 'z' + str(i)]  # Если найдена функция с такой датой и заданием
                    s.append(str(i))  # Добавить номер этого задания в список с найденными заданиями
                except:
                    pass  # Если не найдено задание, идти дальше к следующему заданию
            if len(s) > 0:  # Если нашлось хотя-бы одно задание
                print('Существуют программы для задач: ', end='')  # Вывести найденные задания
                print(*s, sep=', ')
                IsDateCorrect = False  # Дата введена правильно
                IsSeminarCorrect = True  # Семинар найден
        if IsSeminarCorrect:  # Если семинар найден
            try:
                f = globals()['s' + date + 'z' + input('Номер задания: ')]  # Получаем от пользователя номер задания
                IsWhileWork = False  # Если такое задание найдено, то остановить цикл while
                try:
                    print()  # Вывести пустую строку для отделения меню от задания
                    f()  # Запускаем решение
                except:
                    print('В решении ошибка')  # Если в решение появилась ошибка, выводим соотв. сообщение
            except:
                print('Такого задания нет')  # Если такого задания нет, то вывести соотв. сообщение
            print("\nДля завершения работы программы введите 'b', для продолжения - любой символ")
            if input() == 'b':  # Если вводится не символ 'b'
                IsWhileWork = False  # То останавливаем цикл while
            else:
                IsWhileWork = True  # То продолжать цикл while
        else:
            print('Такого семинара не было', end='\n\n')  # Если семинар не найден, выводим соотв. сообщение


Menu()